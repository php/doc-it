<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 19af072c3eb88de9b99be2e982af8949f0b68a95 Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="migration74.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Cambiamenti incompatibili all'indietro</title>

 <sect2 xml:id="migration74.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration74.incompatible.core.non-array-access">
   <title>Accesso in stile Array a non-arrays</title>

   <para>
    Tentare di usare valori di tipo <type>null</type>, 
    <type>bool</type>, <type>int</type>, 
    <type>float</type> o <type>resource</type> come 
    un array (ad es. <literal>$null["key"]</literal>) 
    ora genererà una notice.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.get-declared-classes">
   <title>Funzione <function>get_declared_classes</function></title>

   <para>
    La funzione <function>get_declared_classes</function> 
    non ritornerà più classi anonime che non siano 
    già state instanziate.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.fn">
   <title>Parola chiave <literal>fn</literal></title>

   <para>
    <literal>fn</literal> ora è una parola riservata. 
    In particolare essa non potrà più essere usata 
    come nome di una classe. Potrà ancora venire usata 
    come nome di metodo o di costante di classe.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.php-tag">
   <title><literal>&lt;?php</literal> tag alla 
   fine del file</title>

   <para>
    <literal>&lt;?php</literal> alla fine del file 
    (Senza un carattere di newline che lo segua) 
    ora verrà interpretato come un carattere di 
    apertura di uno script PHP. Precedentemente 
    era comunque interpretato come un carattere di 
    apertura abbreviato seguito dal literal 
    <literal>php</literal> e sfociava in un errore 
    di sintassi (con <literal>short_open_tag=1</literal>) 
    o veniva interpretato come un literal 
    <literal>&lt;?php</literal> string 
    (con <literal>short_open_tag=0</literal>).
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.stream-wrappers">
   <title>Stream wrappers</title>

   <para>
    Quando usiamo include/require su uno stream,
    <methodname>streamWrapper::stream_set_option</methodname> 
    verrà invocato con l'opzione 
    <constant>STREAM_OPTION_READ_BUFFER</constant>.
    Implementazioni di stream wrapper personalizzate 
    potrebbero aver bisogno di implementare il metodo 
    <methodname>streamWrapper::stream_set_option</methodname> 
    per evitare un allarme (ritornare sempre &false; 
    è un'implementazione sufficiente).
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.serialization">
   <title>Serialization</title>

   <para>
    Il formato <literal>o</literal> serialization è 
    stato rimosso. Non è mai stato prodotto da PHP, 
    questo poteva solo interrompere la non serializzazione 
    di stringhe costruite manualmente.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.password-algorithm-constants">
   <title>Costanti per algoritmi di Password</title>

   <para>
    Gli identificatori di algoritmi di occultazione 
    delle password ora sono nullable strings al posto  
    di integers.
   </para>

   <itemizedlist>
    <listitem>
     <simpara>
      <constant>PASSWORD_DEFAULT</constant> era int 1; ora è &null;
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_BCRYPT</constant> era int 1; ora è la stringa '2y'
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2I</constant> era int 2; ora è la stringa 'argon2i'
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <constant>PASSWORD_ARGON2ID</constant> era int 3; ora è la stringa 'argon2id'
     </simpara>
    </listitem>
   </itemizedlist>

   <para>
    Le applicazioni che usano correttamente le 
    costanti PASSWORD_DEFAULT, PASSWORD_BCRYPT, 
    PASSWORD_ARGON2I, e PASSWORD_ARGON2ID continuerranno 
    a funzionare correttamente.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.htmlentities">
   <title>Funzione <function>htmlentities</function></title>

   <para>
    <function>htmlentities</function> ora solleverà 
    una notice (anzichè uno strict standard warning) 
    se è usata con una codifica per la quale sono 
    supportate solo sostituzioni di entità basilare, 
    in questo caso è equivalente a 
    <function>htmlspecialchars</function>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.incompatible.core.fread-fwrite">
   <title>Funzioni <function>fread</function> e 
   <function>fwrite</function></title>

   <para>
    Le funzioni <function>fread</function> e 
    <function>fwrite</function> ora ritorneranno 
    &false; se l'operazione fallisce
    Precedentemente veniva restituita una stringa 
    vuota o uno 0. EAGAIN/EWOULDBLOCK non sono 
    considerati fallimenti delle operazioni.
   </para>
   <para>
    Queste funzioni al fallimento, ora sollevano 
    anche una notice, come quando si tenta di scrivere 
    su una risorsa in sola lettura.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.incompatible.bcmath">
  <title>BCMath Arbitrary Precision Mathematics</title>

  <para>
   Le funzioni BCMath ora avviseranno se viene 
   passato come argomento un numero malformato, 
   come <literal>"32foo"</literal>. L'argomento 
   verrà interpretato come 0, come nelle versioni precedenti.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.curl">
  <title>CURL</title>

  <para>
   Tentare di serializzare una classe 
   <classname>CURLFile</classname> genererà 
   un'eccezione. Precedentemente, l'eccezione era 
   sollevata solo al tentativo di deserializzazione.
  </para>
  <para>
   Usare la costante <constant>CURLPIPE_HTTP1</constant> 
   è deprecato e non è più supportato come per 
   CURL 7.62.0.
  </para>
  <para>
   Il parametro <literal>$version</literal> della 
   funzione <function>curl_version</function> 
   è deprecato. Se si passano valori diversi dal 
   predefinito <constant>CURLVERSION_NOW</constant> 
   verrà sollevato un allarme e il parametro verrà 
   igmorato.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.datetime">
  <title>Date e Time</title>

  <para>
   Chiamare <function>var_dump</function> o simili 
   su istanze di <classname>DateTime</classname> o 
   <classname>DateTimeImmutable</classname> non 
   lascerà più l'accesso alle proprietà dell'oggetto. 
  </para>
  <para>
   La comparazione di oggetti <classname>DateInterval</classname> 
   usando <literal>==</literal>, <literal>&lt;</literal>, e 
   così via, ora genererà un allarme e ritornerà sempre 
   &false;. Precedentemente tutti gli oggetti 
   <classname>DateInterval</classname> erano considerati 
   uguali indipendentemente dalle loro proprietà.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.intl">
  <title>Intl</title>

  <para>
   Il valore del parametro predefinito di 
   <function>idn_to_ascii</function> e 
   <function>idn_to_utf8</function> ora è 
   <constant>INTL_IDNA_VARIANT_UTS46</constant> 
   anziché il deprecato <constant>INTL_IDNA_VARIANT_2003</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   La funzionalità incorporata del server è 
   stata rimossa. Si era rivelata difettosa 
   fin da PHP 7.0.
  </para>
  <para>
   La proprietà non documentata <literal>mysqli::$stat</literal> 
   è stata rimossa in favore di 
   <methodname>mysqli::stat</methodname>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.openssl">
  <title>OpenSSL</title>

  <para>
   La funzione <function>openssl_random_pseudo_bytes</function> 
   ora genererà un'eccezione in situazioni d'errore 
   similmente a <function>random_bytes</function>. 
   In particulare, un <classname>Error</classname> 
   è generato se il numero di bytes richiesti è 
   minore o uguale a 0 e una <classname>Exception</classname> 
   è sollevata se non può essere garantita una 
   casualità sufficiente.
   L'argomento <literal>$crypto_strong output</literal> 
   è garantito per essere sempre &true; se la funzione non 
   genera errori od eccezioni, così non è necessario un controllo 
   esplicito dell'esecuzione. 
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.pcre">
  <title>Regular Expressions (Perl-Compatible)</title>

  <para>
   Quando viene usata la modalità 
   <constant>PREG_UNMATCHED_AS_NULL</constant>, 
   l'accodamento di gruppi di catture non corrispondenti, 
   verrà impostato a &null; (o 
   <literal>[null, -1]</literal> se offset capture è 
   abilitato). Questo significa che la dimensione di 
   <literal>$matches</literal> sarà sempre la stessa. 
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.pdo">
  <title>PHP Data Objects</title>

  <para>
   Il tentativo di serializzare istanze di 
   <classname>PDO</classname> o 
   <classname>PDOStatement</classname> 
   ora genererà una <classname>Exception</classname> 
   piuttosto che una <classname>PDOException</classname>, 
   coerente con altre classi interne che non 
   supportano la serializzazione.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.reflection">
  <title>Reflection</title>

  <para>
   Gli oggetti Reflection ora genereranno un'eccezione 
   se si tenta di serializzarli. La serializzaazione di 
   oggetti reflection objects non è mai stata supportata 
   e generava oggetti reflection corrotti. Ora è stata 
   esplicitamente proibita.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <para>
   Chiamare <function>get_object_vars</function> 
   su un istanza di <classname>ArrayObject</classname> 
   ora ritorna sempre le proprietà dello stesso 
   <classname>ArrayObject</classname> (o una sua 
   sottoclasse). Precedentemente ritornava i valori 
   dell'array/object nascosto finchè l'opzione 
   <constant>ArrayObject::STD_PROP_LIST</constant> 
   non fosse specificata.
  </para>
  <para>
   Altre operazioni coinvolte sono: 
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     <methodname>ReflectionObject::getProperties</methodname>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>reset</function>, <function>current</function>, etc.
     Usare metodi <interfacename>Iterator</interfacename> 
     al loro posto. 
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Potenzialmente altre proprietà che 
     lavorano su oggetti come una list,
     es. <function>array_walk</function>.
    </simpara>
   </listitem>
  </itemizedlist>
  <para>
   I cast in <literal>(array)</literal> 
   non sono interessati. Essi continueranno a 
   ritornare entrambi l'array nascosto o 
   le proprietà dell'<classname>ArrayObject</classname>, 
   conformemente a dove la costante 
   <constant>ArrayObject::STD_PROP_LIST</constant>
   è invocata. 
  </para>
  <para>
   <methodname>SplPriorityQueue::setExtractFlags</methodname> 
   genererà un'eccezione se gli viene passato zero 
   come parametro. Precedentemente questo poteva 
   generare un fatal error riparabile alla sucessiva 
   operazione di estrazione.
  </para>
  <para>
   <classname>ArrayObject</classname>, <classname>ArrayIterator</classname>,
   <classname>SplDoublyLinkedList</classname> e <classname>SplObjectStorage</classname>
   ora supportano i meccanismi <literal>__serialize()</literal> 
   e <literal>__unserialize()</literal> oltre che 
   l'interfaccia <interfacename>Serializable</interfacename>.
   Questo significa che le serializzazioni create 
   sulle vecchie versioni di PHP possono ancora essere 
   deserializzate, ma le nuove, create da PHP 7.4 non potranno 
   essere comprese dalle vecchie versioni.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.tokenizer">
  <title>Tokenizer</title>

  <para>
   <function>token_get_all</function> emetterà un 
   <constant>T_BAD_CHARACTER</constant> token 
   per caratteri inaspettati o per dei vuoti nello 
   streaming dei token.
  </para>
 </sect2>

 <sect2 xml:id="migration74.incompatible.cookie-decode">
  <title>Cookies in entrata</title>

  <para>
   Come per PHP 7.4.11, i <emphasis>nomi</emphasis> 
   dei cookies in entrata non saranno decodificati 
   nel protocollo URL per ragioni di sicurezza.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
