<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 96c9d88bad9a7d7d44bfb7f26c226df7ee9ddf26 Maintainer: ManueldG Status: ready -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
  <chapter xml:id="security.general" xmlns="http://docbook.org/ns/docbook">
   <title>Considerazioni Generali</title>
   <simpara>
    Un sistema completamente sicuro è virtualmente impossibile, quindi un
    approccio spesso utilizzato nella professione della sicurezza è quello 
    di bilanciare rischio e usabilità. Se ogni variabile inviata da un 
    utente richiedesse due forme di convalida biometrica (come una scansione
    della retina e un'impronta digitale), si avrebbe un livello di identificazione 
    estremamente elevato. Ci vorrebbe anche mezz'ora per compilare un modulo abbastanza
    complesso, il che porterebbe a incoraggiare gli utenti a trovare dei modi per
    aggirare la sicurezza.
   </simpara>
   <simpara>
    La migliore sicurezza è spesso abbastanza discreta da soddisfare 
    i requisiti senza che all'utente gli venga impedito di svolgere il proprio
    lavoro o caricare troppo l'autore del codice con un'eccessiva complessità.
    In effetti, alcuni attacchi alla sicurezza sono semplicemente degli exploit di 
    questo tipo di sicurezza eccessivamente complessa, che tende a perdersi nel tempo.
   </simpara>
   <simpara>
    Una frase che vale la pena ricordare: un sistema è valido quanto l'anello più debole
    di una catena. Se tutte le transazioni vengono registrate in modo massiccio in base a
    ora, posizione, tipo di transazione, ecc. ma l'utente viene verificato solo in base a 
    un singolo cookie, la validità del collegamento degli utenti
    al log degli accessi è gravemente compromessa.
   </simpara>
   <simpara>
    Quando esegui un test, tieni presente che non sarai in grado di testare tutte le
    casistiche, nemmeno per la più semplice delle pagine. L'input che
    potresti aspettarti sarà completamente diverso dall'input fornito da
    un dipendente insoddisfatto, un cracker con mesi di tempo libero o un gatto
     che cammina sulla tastiera. Ecco perché è
    meglio guardare il codice da una prospettiva logica, per discernere
    dove possono essere introdotti dati imprevisti e quindi seguire come vengono
    modificati, ridotti o amplificati.
   </simpara>
   <simpara>
    Internet è pieno di persone che cercano di diventare famosi
    violando il tuo codice, mandando in crash il tuo sito, pubblicando
    contenuti inappropriati e rendendoti la giornata interessante in altri modi.
    Non importa se hai un sito grande o piccolo, sei
    un bersaglio semplicemente perché sei online, perché hai un server a cui
    puoi connetterti. Molti programmi di cracking non distinguono le dimensioni del bersaglio,
    semplicemente analizzano enormi blocchi di IP alla ricerca di vittime. Cerca di non
    diventarne uno.
   </simpara>
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
