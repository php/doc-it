<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="migration74.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuove caratteristiche</title>

 <sect2 xml:id="migration74.new-features.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration74.new-features.core.typed-properties">
   <title>Propietà tipizzate</title>

   <para>
    Le proprietà delle classi ora supportano la dichiarazione dei tipi.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class User {
    public int $id;
    public string $name;
}
?>
]]>
     </programlisting>
    </informalexample>
    L'esempio precedente impone che a <literal>$user->id</literal> 
    possa unicamente essere assegnato un valore 
    <type>int</type> e a <literal>$user->name</literal> 
    possano essere assegnati solo valori 
    <type>string</type>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.arrow-functions">
   <title>Arrow functions</title>

   <para>
    <link linkend="functions.arrow">Arrow functions</link> 
    è una forma sintattica abbreviata per 
    definire funzioni con uno scope implicito 
    passato per valore.

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$factor = 10;
$nums = array_map(fn($n) => $n * $factor, [1, 2, 3, 4]);
// $nums = array(10, 20, 30, 40);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.type-variance">
   <title>Limitazione dei tipi di ritorno covariati e di argomenti di tipo controvariante</title>

   <para>
    Il codice che segue da ora lavorerà:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {}
class B extends A {}

class Producer {
    public function method(): A {}
}
class ChildProducer extends Producer {
    public function method(): B {}
}
?>
]]>
     </programlisting>
    </informalexample>
    Il supporto completo alla varianza è disponibile 
    solo se autocaricato. All'interno di un file sono 
    possibili le referenze unicamente non cicliche, questo 
    perché tutte le classi devono essere disponibili prima 
    di poter essere referenziate.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.null-coalescing-assignment-operator">
   <title>Operatore di assegnamento Null coalescing</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$array['key'] ??= computeDefault();
// è esatttamente equivalente a
if (!isset($array['key'])) {
    $array['key'] = computeDefault();
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.unpack-inside-array">
   <title>Unpacking di arrays interni</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$parts = ['apple', 'pear'];
$fruits = ['banana', 'orange', ...$parts, 'watermelon'];
// ['banana', 'orange', 'apple', 'pear', 'watermelon'];
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.numeric-literal-separator">
   <title>Separatori numerici letterali</title>

   <para>
    I numeric literals possono contenere delle 
    sottolineature tra le cifre.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
6.674_083e-11; // float
299_792_458;   // decimal
0xCAFE_F00D;   // hexadecimal
0b0101_1111;   // binary
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>
 
  <sect3 xml:id="migration74.new-features.core.weakreference">
   <title>Referenze Weak (deboli)</title>

   <para>
    Le referenze deboli consentono al programmatore 
    di ottenere il riferimento ad un oggetto che 
    non previene la distruzione dell'oggetto.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.tostring-exceptions">
   <title>Permesse le eccezioni da __toString()</title>

   <para>
    Saltare le eccezioni dal metodo 
    <link linkend="object.tostring">__toString()</link> 
    ora è permesso. Prima questo portava ad un 
    fatal error. I fatal errors riparabili nella 
    conversione delle stringhe hannop ermesso la 
    conversione da <classname>Error</classname> 
    a eccezioni.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.new-features.curl">
  <title>CURL</title>
  
  <para>
   <classname>CURLFile</classname> ora supporta 
   gli offuscatori di stream (wrappers) oltre che 
   i plain file names, se l'estensione è stata 
   compilata con libcurl &gt;= 7.56.0.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.filter">
  <title>Filtri</title>
  
  <para>
   Il filtro <constant>FILTER_VALIDATE_FLOAT</constant> 
   ora supporta le opzioni <literal>min_range</literal> e
   <literal>max_range</literal> con la stessa 
   semantica di <constant>FILTER_VALIDATE_INT</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.ffi">
  <title>FFI</title>

  <para>
   FFI è una nuova estensione che provvede 
   un modo semplice per chiamare funzioni native, 
   accedere a variabili native e creare o accedere 
   a strutture di dati definite nelle librerie di 'C'.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.gd">
  <title>GD</title>

  <para>
   Aggiunto il filtro per immagini 
   <constant>IMG_FILTER_SCATTER</constant> 
   per applicare un scatter filter alle immagini.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.hash">
  <title>Hash</title>

  <para>
   Aggiunto l'algoritmo di hash <literal>crc32c</literal> 
   che usa il polinomio di Castagnoli.
   Questa variante di CRC32 è usata dai sistemi 
   di storage come iSCSI, SCTP, Btrfs e ext4.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.mbstring">
  <title>Multibyte String</title>

  <para>
   Aggiunta la funzione <function>mb_str_split</function> 
   che procura le stesse funzzionalità di 
   <function>str_split</function>, ma operando sui 
   code points piuttosto che sui bytes. 
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.opcache">
  <title>OPcache</title>

  <para>
   <link linkend="opcache.preloading">Il supporto 
   per il codice precaricato</link> è stato aggiunto.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pcre">
  <title>Regular Expressions (Perl-Compatible)</title>

  <para>
   Le funzioni <function>preg_replace_callback</function> 
   e <function>preg_replace_callback_array</function>
   ora accettano l'argomento addizionale 
   <parameter>flags</parameter>, con il supporto per 
   le costanti <constant>PREG_OFFSET_CAPTURE</constant>
   e <constant>PREG_UNMATCHED_AS_NULL</constant>.
   Questo influenza il formato degli array di 
   confronto passati alle funzioni di callback.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo">
  <title>PDO</title>

  <para>
   Lo username e la password ora possono essere 
   specificate come parte del PDO DSN per i drivers 
   mysql, mssql, sybase, dblib, firebird e oci. 
   Prima questo era supportato solo dal driver 
   pgsql. Se username e password sono specificati 
   in entrambi: il costruttore e il DSN, il 
   costruttore prende la precedenza.
  </para>
  <para>
   Ora è possibile scavalcare i punti di domanda 
   nelle query SQL per evitare che vengano interpretati 
   come dei segnaposto per parametri. Scrivere 
   <literal>??</literal> permette di inviare un solo 
   punto di domanda al database e, ad esempio di usare 
   l'operatore PostgreSQL JSON key exists 
   (<literal>?</literal>).
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_oci">
  <title>PDO_OCI</title>

  <para>
   <methodname>PDOStatement::getColumnMeta</methodname> 
   ora è disponibile.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   <literal>PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT)</literal>
   permette di controllare dove la richiesta è 
   in sola lettura, cioè che non causa modificha al database.
  </para>
  <para>
   <literal>PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES, true)</literal>
   abilita l'uso dei codici risultato di SQLite3 
   in <function>PDO::errorInfo</function> 
   e <function>PDOStatement::errorInfo</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   Aggiunto <methodname>SQLite3::lastExtendedErrorCode</methodname>
   per ottenere l'ultimo extended result code.
  </para>
  <para>
   Aggiunto 
   <literal>SQLite3::enableExtendedResultCodes($enable = true)</literal>,
   che rende il ritorno di <methodname>SQLite3::lastErrorCode</methodname>
   un extended result code.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.standard">
  <title>Standard</title>

  <sect3 xml:id="migration74.new-features.standard.strip-tags">
   <title>strip_tags() con array di tag names</title>
   <para>
    <function>strip_tags</function> 
    ora accetta array di tags consentiti:
    al posto di <literal>strip_tags($str, '&lt;a&gt;&lt;p&gt;')</literal>
    ora è possibile scrivere <literal>strip_tags($str, ['a', 'p'])</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.magic-serialize">
   <title>Custom object serialization</title>
   <para>
    Un nuovo meccanismo per la serializzazione 
    di oggetti personalizzata è stato aggiunto, 
    questo usa due metodi magici: <literal>__serialize</literal>
    e <literal>__unserialize</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
//RItorna un array contenente tutti gli stati necessari deglioggetti
public function __serialize(): array;

//Ripristina lostato degli oggetti come l'array di dati passato come argomento 
public function __unserialize(array $data): void;
?>
]]>
     </programlisting>
    </informalexample>
    Il nuovo meccanismo di serializzazione ricopre l'uso 
    dell'intefaccia <interfacename>Serializable</interfacename>,
    che verrà deprecata in futuro.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.array-merge-no-args">
   <title>Gli Array si attivano da funzioni senza argomenti</title>
   <para>
    <function>array_merge</function> e 
    <function>array_merge_recursive</function>
    possono ora essere chiamate senza argomenti, 
    nel qual caso ritorneranno un arry vuoto.
    Questo è utile se usato congiuntamente allo 
    spread operator, es. <literal>array_merge(...$arrays)</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.proc-open">
   <title>Funzione <function>proc_open</function></title>
   <para>
    <function>proc_open</function> ora accetta un array 
    anzichè una stringa come comando. In questo caso il 
    processo verrà aperto direttamente (senza passare 
    attraverso la shell) e PHP si prenderà cura di ogni 
    argomento necessario. 
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
proc_open(['php', '-r', 'echo "Hello World\n";'], $descriptors, $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <function>proc_open</function> ora supporta 
    i descrittori <literal>redirect</literal> 
    e <literal>null</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Come 2>&1 sulla shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['redirect', 1]], $pipes);
// Come 2>/dev/null or 2>nul sulla shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['null']], $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.sodium-argon-hash">
   <title>argon2i(d) senza libargon</title>
   <para>
    <function>password_hash</function> ora ha le 
    implementazioni argon2i e argon2id dalle 
    estensioni di sodium quando PHP è compilato 
    senza libargon. 
   </para>
  </sect3>

 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
