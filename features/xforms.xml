<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 96c9d88bad9a7d7d44bfb7f26c226df7ee9ddf26 Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->
<chapter xml:id="features.xforms" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Trattare con gli XForms</title>
 <para>
  <link xlink:href="&url.xforms;">XForms</link> definiscono una variazione dei 
  tradizionali web forms che gli permette di essere utilizzati in una vastissima 
  varietà di piattaforme e browseres anche con tipi di dontenuti non tradizionali 
  come, ad esempio, i documenti PDF. 
 </para>
 <para>
  La prima differenza essenziale negli XForm è il modo in cui vengono sottoposti 
  al client. <link xlink:href="&url.xforms.htmlauthors;"><literal>XForms for HTML Authors</literal></link>
  contiene una descrizione dettagliata di come creare un XForm, per gli scopi 
  di questo tutorial vdremo solo un esempio molto semplice. 
 </para>
 <example>
  <title>Un semplice XForm di ricerca</title>
  <programlisting role="html">
<![CDATA[
<h:html xmlns:h="http://www.w3.org/1999/xhtml"
        xmlns="http://www.w3.org/2002/xforms">
<h:head>
 <h:title>Search</h:title>
 <model>
  <submission action="http://example.com/search"
              method="post" id="s"/>
 </model>
</h:head>
<h:body>
 <h:p>
  <input ref="q"><label>Find</label></input>
  <submit submission="s"><label>Go</label></submit>
 </h:p>
</h:body>
</h:html>
]]>
  </programlisting>
 </example>
 <para>
  La maschera soprastante mostra una casella di testo per l'input (chiamata 
  <parameter>q</parameter>), e un pulsante di invio. Quando il pulsante viene 
  premuto, il form ci spedisce alla pagina riferita da <literal>action</literal>. 
 </para>
 <para>
  Qui iniziano le differenze dal punto di vista delle vostre applicazioi web. 
  In un normale form HTML, i dati verrebbero spediti come 
  <literal>application/x-www-form-urlencoded</literal>, nel mondo degli XForm 
  invece, queste informazioni sono spedite come dati in formato <acronym>XML</acronym>. 
 </para>
 <para>
  Se si è scelto di lavorare con gli XForm probabilmente si vogliono i dati come 
  testo <acronym>XML</acronym>, in questo caso, si guardi in <varname>$HTTP_RAW_POST_DATA</varname> 
  dove si troveranno i documenti <acronym>XML</acronym> generati dal browser 
  che si possono passare al nostro motore <acronym>XSLT</acronym> preferito o 
  a un elaboratore di documenti. 
 </para>
 <para>
  Se non si è iunteressati al formato e si vuole solamente che i dati vengano 
  caricati nella tradizionale variabile <varname>$_POST</varname>, si può istruire 
  il browser del client di spedirli come <literal>application/x-www-form-urlencoded</literal> 
  cambiando l'attributo <parameter>method</parameter> a <emphasis>urlencoded-post</emphasis>. 
 </para>
 <example>
  <title>Usare un XForm per popolare <varname>$_POST</varname></title> 
  <programlisting role="html">
<![CDATA[
<h:html xmlns:h="http://www.w3.org/1999/xhtml"
        xmlns="http://www.w3.org/2002/xforms">
<h:head>
 <h:title>Search</h:title>
 <model>
  <submission action="http://example.com/search"
              method="urlencoded-post" id="s"/>
 </model>
</h:head>
<h:body>
 <h:p>
  <input ref="q"><label>Find</label></input>
  <submit submission="s"><label>Go</label></submit>
 </h:p>
</h:body>
</h:html>
]]>
  </programlisting>
 </example>
 <note>
  <simpara>
   Nel momento in cui questo è stato scritto, molti browser non supportano gli 
   XForm. Controllare la versione del proprio brwser se l'esempio precedente 
   dovesse fallire. 
  </simpara>
 </note>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
