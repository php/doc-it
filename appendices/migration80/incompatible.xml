<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 12b1d4704ea448b55ec155619be1e50c0e67e9f9 Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="migration80.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Cambiamenti non retrocompatibili</title>

 <sect2 xml:id="migration80.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration80.incompatible.core.string-number-comparision">
   <title>Comparazione di stringhe in numeri</title>

   <para>
    La comparazione non ristretta tra numeri 
    e stringhe non numeriche ora lavora promuovendo 
    il numero in stringa e confrontando le due 
    stringhe. La comparazione tra numeri e stringhe 
    numeriche invece continua a lavorare come prima. 
    Si noti che questo significa che 
    <code>0 == "not-a-number"</code> è considerato 
    false ora. 
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Comparison</entry>
        <entry>Before</entry>
        <entry>After</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><code>0 == "0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "0.0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>0 == ""</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>42 == "   42"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>42 == "42foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <!-- RFC: https://wiki.php.net/rfc/string_to_number_comparison -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.incompatible.core.other">
   <title>Altri cambiamenti incompatibili</title>

   <itemizedlist>
    <listitem>
     <para>
      <literal>match</literal> ora è una parola riservata. 
     </para>
    </listitem>
    <listitem>
     <para>
      Il fallimento di asserzioni ora, per 
      impostazione predefinita scavalca le 
      eccezioni. Se si desidera mantenere il 
      vecchio comportamento è possibile impostare 
      <code>assert.exception=0</code> nelle 
      impostazioni INI. 
     </para>
    </listitem>
    <listitem>
     <para>
      I metodi con gli stessi nomi della classe 
      non saranno più interpretati dai costruttori.
      Il metodo 
      <link linkend="object.construct">__construct()</link> 
      può essere usato in sostituzione. 
     </para>
    </listitem>
    <listitem>
     <para>
      La possibilità di chiamare metodi non 
      statici in ambiti statici è stata rimossa. 
      Così <function>is_callable</function> 
      fallirà la ricerca di un metodo non statico 
      con un nome di classe (dovrà cercarlo in 
      un'istanza dell'oggetto). 
     </para>
    </listitem>
    <listitem>
     <para>
      i cast <code>(real)</code> e 
      <code>(unset)</code> sono stati rimossi. 
     </para>
    </listitem>
    <listitem>
      <para>
       La direttiva ini 
       <link linkend="ini.track-errors">track_errors</link> 
       è stata rimossa. Ciò significa che 
       <varname>php_errormsg</varname> non è più disponibile. 
       La funzione <function>error_get_last</function> 
       potrà essere usata al suo posto. 
      </para>
    </listitem>
    <listitem>
     <para>
      La possibilità di definire costanti case-insensitive 
      è stata rimossa. Il terzo argomento di 
      <function>define</function> non sarà più &true;. 
     </para>
    </listitem>
    <listitem>
     <para>
      La possibilità di specificare un autoloader 
      usando la funzione <function>__autoload</function> 
      è stata rimossa. Al suo posto potrà essere usata 
      <function>spl_autoload_register</function>. 
     </para>
    </listitem>
    <listitem>
     <para>
      L'argomento <parameter>errcontext</parameter> 
      non potrà più essere passato come parametro per 
      personalizzare i gestori degli errori impostati 
      con <function>set_error_handler</function>. 
     </para>
    </listitem>
    <listitem>
     <para>
      <function>create_function</function> è stato rimosso. 
      Al suo posto si possono usare le funzioni anonime. 
     </para>
    </listitem>
    <listitem>
     <para>
      <function>each</function> è stata rimosssa. 
      &foreach; o <classname>ArrayIterator</classname>
      possono essere usate al suo posto. 
     </para>
    </listitem>
    <listitem>
     <para>
      La possibilità di declassare la variabile 
      <varname>this</varname> da closures create 
      da un metodo usando 
      <methodname>Closure::fromCallable</methodname> o 
      <methodname>ReflectionMethod::getClosure</methodname>, 
      è stata rimossa. 
     </para>
    </listitem>
    <listitem>
     <para>
      La possibilità di declassare la variabile 
      <varname>this</varname> da closures proprie 
      che contengono l'uso della variabile 
      <varname>this</varname> è stata rimossa anch'essa. 
     </para>
    </listitem>
    <listitem>
     <para>
      
      La possibilità di usare 
      <function>array_key_exists</function> 
      con gli oggetti è stata rimossa. 
      <function>isset</function> o 
      <function>property_exists</function> 
      possono essere usate al suo posto. 
     </para>
    </listitem>
    <listitem>
     <para>
      Il comportamento di 
      <function>array_key_exists</function> 
      riguardo al tipo del parametro 
      <parameter>key</parameter> è stato reso più 
      consistente con <function>isset</function> e 
      un normale accesso ad array. Tutti i tipi chiave 
      ora usano la solita coercizione le chiavi di 
      oggetti array generano un 
      <classname>TypeError</classname>. 
     </para>
    </listitem>
    <listitem>
     <para>
      Tutti gli array aventi un numero 
      <replaceable>n</replaceable> come loro 
      prima chiave numerica, useranno 
      <replaceable>n+1</replaceable> per la loro 
      prossima chiave implicita, anche se 
      <replaceable>n</replaceable> è negativo. 
      <!-- RFC: https://wiki.php.net/rfc/negative_array_index -->
     </para>
    </listitem>
    <listitem>
     <para>
      Il livellopedefinito di error_reporting 
      ora è <constant>E_ALL</constant>. Precedentemente
      escludeva <constant>E_NOTICE</constant> e 
      <constant>E_DEPRECATED</constant>. 
     </para>
    </listitem>
    <listitem>
     <para>
      <link linkend="ini.display-startup-errors">display_startup_errors</link> 
      ora è abilitato come impostazione predefinita. 
      default.
     </para>
    </listitem>
    <listitem>
     <para>
      Usare <type>parent</type> dentro una classe 
      che non ha genitori ora sfocerà in un fatal 
      compile-time error. 
     </para>
    </listitem>
    <listitem>
     <para>
      Lopratore <literal>@</literal> non ammetterà 
      più di silenziare fatal errors 
      (<constant>E_ERROR</constant>, 
      <constant>E_CORE_ERROR</constant>, 
      <constant>E_COMPILE_ERROR</constant>, 
      <constant>E_USER_ERROR</constant>, 
      <constant>E_RECOVERABLE_ERROR</constant>, 
      <constant>E_PARSE</constant>). Gestori di 
      errori che si aspettano error_reporting uguali a  
      <literal>0</literal> quando viene usato 
      <literal>@</literal>, possono essere riparati 
      usando maschere di controllo al suo posto: 
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Replace
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (error_reporting() == 0) {
        return false; // Silenziato
    }
    // ...
}

// With
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (!(error_reporting() & $err_no)) {
        return false; // Silenziato 
    }
    // ...
}
?>
]]>
      </programlisting>
     </para>
     <para>
      In più, ci si può prendere cura del fatto 
      che messaggi di errore non vengano mostrati 
      in ambienti produttivi per evitare la diffusione 
      di informazioi che potrebbero essere dannose. 
      Assicurandosi che <code>display_errors=Off</code> 
      sia usato congiuntamente a error logging. 
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>#[</literal> non sarà più interpretato 
      come l'inizio di un commento siccome questa 
      sintassi ora è usata per gli attributi. 
      <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
     </para>
    </listitem>
    <listitem>
     <para>
      Gli errori eeditati da segnature di metodi 
      incompatibili (violazioni LSP) ora genereranno 
      sempre un fatal error. Precedentemente, in 
      alcuni casi era generato solo un allarme. 
      <!-- RFC: https://wiki.php.net/rfc/lsp_errors -->
     </para>
    </listitem>
    <listitem>
     <para>
      La precedenza nella concatenazione degli 
      operatori è cambiata relativamente a bitshift 
      e addizione così come tra bitshift e sottrazione. 
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
echo "Sum: " . $a + $b;
// precedentemente interpretato come: 
echo ("Sum: " . $a) + $b;
// ora interpretato come: 
echo "Sum:" . ($a + $b);
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/concatenation_precedence -->
     </para>
    </listitem>
    <listitem>
     <para>
      Gli argomenti con un valore predefinito che 
      si risolveva in  &null; a runtime non verranno 
      più implicitamente marcati come tipo di argomento 
      nullable. Un tipo esplicitamente nullable o 
      esplicitamente &null; come valore predefinito 
      dovranno essere usati in alternativa. 
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Replace
function test(int $arg = CONST_RESOLVING_TO_NULL) {}
// Con 
function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
// O
function test(int $arg = null) {}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      
      Un certo numero di allarmio sono stati convertiti 
      in <classname>Error</classname> exceptions: 
     </para>
     <para>
      <simplelist>
       <member>
        Tentare di scrivere una proprietà su di un 
        NON-object. Precedentemente questo creava 
        una oggetto classe standard con null, false 
        e stringhe vuote. 
       </member>
       <member>
        Tentare di aggiungere un elemento ad un array 
        in cui la chiave PHP_INT_MAX sia già in uso. 
       </member>
       <member>
        Tentare di usare un tipo non valido (array 
        od oggetto) come chiave di un array o stringa 
        di offset. 
       </member>
       <member>Tentare di scrivere su un indice 
       di array un valore scalare.</member>
       <member>Tentare di destrutturare un non-array
       o un non-Traversable.</member>
       <member>
        Tentare l'accesso a costanti non qualificate 
        che sono indefinite. Precedentemenete generava 
        un allarme ed era interpretato come una stringa. 
       </member>
      </simplelist>
     </para>
     <para>
      Un certo numero di note sono state convertite 
      in allarmi: 
     </para>
     <para>
      <simplelist>
       <member>Tentare di leggere una variabile indefinita.</member>
       <member>Tentare di leggere una proprietà indefinita.</member>
       <member>Tentare di leggere una chiave di array indefinita.</member>
       <member>Tentare di leggere una propietà di un non-object.</member>
       <member>Tentare l'accesso all'indice di array di un non-array.</member>
       <member>Tentare di convertire un array in string.</member>
       <member>Tentare di usare una risorsa come chiave di un array.</member>
       <member>Tentare di usare null, un boolean, o un float come offset di una stringa.</member>
       <member>Tentare di leggere una stringa oltre il suo offset.</member>
       <member>0Tentare di assegnare una stringa vuota all'offset di una stringa.</member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/engine_warnings -->
     </para>
    </listitem>
    <listitem>
     <para>
      Tentare di assegnare bytes all'offset di 
      una stringa ora farà emetter un allarme. 
     </para>
    </listitem>
    <listitem>
     <para>
      Caratteri inaspettai nella ricerca dei file 
      (come NULL bytes al di fuori della stringa) 
      ora genereranno un eccezione di tipo 
      <classname>ParseError</classname> anziché un 
      allarme a compile time. 
     </para>
    </listitem>
    <listitem>
     <para>
      Le eccezioni non catturate ora passeranno 
      attraverso un "clean shutdown", il che 
      significa che dopo un eccezione non catturata 
      verranno chiamati i distruttori. 
     </para>
    </listitem>
    <listitem>
     <para>
      Il fatal error a compile time "Only variables 
      can be passed by reference" è stato anticipato 
      prima del runtime, e convertito in 
      <classname>Error</classname> exception, 
      "Argument cannot be passed by reference". 
     </para>
    </listitem>
    <listitem>
     <para>
      Alcune note del tipo "Only variables should be 
      passed by reference" sono tate convertite in 
      eccezioni del tipo  "Argument cannot be passed 
      by reference". 
     </para>
    </listitem>
    <listitem>
     <para> 
      Il nome generato per le classi anonime 
      è cambiato. Esso ora include il nome della 
      prima classe o interfaccia genitore: 
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
new class extends ParentClass {};
// -> ParentClass@anonymous
new class implements FirstInterface, SecondInterface {};
// -> FirstInterface@anonymous
new class {};
// -> class@anonymous
?>
]]>
      </programlisting>
     </para>
     <para> 
      Il nome mostrato prima è ancora seguito da
      un NULL byte e da un suffisso unique. 
     </para>
    </listitem>
    <listitem>
     <para>
      Referenze a metodi trait non assoluti in 
      adattamenti di alias di trait ora sono 
      rchieste per evitare ambiguità: 
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class X {
    use T1, T2 {
        func as otherFunc;
    }
    function func() {}
}
?>
]]>
      </programlisting>
     </para>
     <para>
      Se entrambi <code>T1::func()</code> e 
      <code>T2::func()</code> esistono, questo 
      codice precedentemente veniva silenziosamente 
      accettato e si assumeva che func si 
      riferisse a <code>T1::func</code>. Ora genererà 
      un fatal error ed entrambe <code>T1::func</code> 
      o <code>T2::func</code> devono essere scritte in 
      maniera esplicita. 
     </para>
    </listitem>
    <listitem>
     <para>
      La segnatura di metodi astratti definiti nei 
      traits ora è controllata contro la classe di 
      implementazione dei metodi: 
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
trait MyTrait {
    abstract private function neededByTrait(): string;
}

class MyClass {
    use MyTrait;

    // Errore perchè ritorna un tipo scambiato
    private function neededByTrait(): int { return 42; }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      Le funzioni disabilitate ora vengono trattate 
      esattamente come se non esistessero. Chiamare 
      una fuzione disabilitata la riporterà come 
      sconosciuta, e ridefinire una funzione disabilitata 
      ora è possibile. 
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>data://</literal> stream wrappers 
      non sono più scrivibili, come riporta il 
      comportamento documentato. 
     </para>
    </listitem>
    <listitem>
     <para>
      Gli operatori aritmetici e bitwise 
      <literal>+</literal>, <literal>-</literal>, 
      <literal>*</literal>, <literal>/</literal>, 
      <literal>**</literal>, <literal>%</literal>, 
      <literal>&lt;&lt;</literal>, 
      <literal>&gt;&gt;</literal>, 
      <literal>&amp;</literal>, 
      <literal>|</literal>, <literal>^</literal>, 
      <literal>~</literal>, <literal>++</literal>, 
      <literal>--</literal> ora genereranno un 
      <classname>TypeError</classname> quando uno 
      degli operandi è un &array;, &resource; 
      o un non overloaded(sovraccaricato) &object;. 
      La sola eccezione a questo è l'operazione 
      array <literal>+</literal> array , 
      che rimane supportata. 
      <!-- RFC: https://wiki.php.net/rfc/arithmetic_operator_type_checks -->
     </para>
    </listitem>
    <listitem>
     <para>
      La trasformazione da float a string ora 
      verrà sempre svolta, indipendentemente dal 
      sistema su cui viene eseguita. 
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
setlocale(LC_ALL, "de_DE");
$f = 3.14;
echo $f, "\n";
// Precedentemente: 3,14
// Ora:        3.14
?>
]]>
      </programlisting>
     </para>
     <para>
      Vedere <function>printf</function>, 
      <function>number_format</function> e 
      <methodname>NumberFormatter</methodname> 
      per le modalità con cui è possibile 
      formattare i numeri. 
      <!-- RFC: https://wiki.php.net/rfc/locale_independent_float_to_string -->
     </para>
    </listitem>
    <listitem>
     <para>
      Il supporto per l'accesso all'offset 
      con le parentesi graffe, precedentemente 
      deprecato, è stato rimosso. 
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Anziché:
$array{0};
$array{"key"};
//Scrivere: 
$array[0];
$array["key"];
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/deprecate_curly_braces_array_access -->
     </para>
    </listitem>
    <listitem>
     <para>
      Applicare il modificatore final ad un 
      metodo privato ora produce un allarme 
      a meno che il metodo non sia il costruttore
      della classe. 
      <!-- FC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      Se un aggetto costruttore <function>exit</function>s, 
      l'oggetto distruttore non sarà più chiamato.
      Questo migliora il comportamento quando un costruttore 
      genera un errore o un eccezione. 
     </para>
    </listitem>
    <listitem>
     <para>
      I nomi namespaced non possono più contenere 
      spazi bianchi: While <code>Foo\Bar</code> 
      verrà riconosciuto come un namespaced name, 
      <code>Foo \ Bar</code> no. Per converso, le 
      parole riservate ora sono permesse come 
      namespace segments, il che può anche cambiare 
      l'interpretazione del codice: 
      <code>new\x</code> è ora lo stesso di 
      <code>constant('new\x')</code>, ma non di 
      <code>new \x()</code>.
      <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
     </para>
    </listitem>
    <listitem>
     <para>
      Gli operatori ternari nidificati ora 
      richiedono esplicitamente le parentesi. 
      <!-- RFC: https://wiki.php.net/rfc/ternary_associativity -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>debug_backtrace</function> e 
      <methodname>Exception::getTrace</methodname> 
      non genereranno più riferimenti ad argomenti. 
      Non sarà più possibile modificare gli argomenti 
      delle funzioni attraverso la backtrace. 
     </para>
    </listitem>
    <listitem>
     <para>
      La gestione delle stringhe numeriche è stata 
      alterata per essere più intuitiva e meno 
      soggetta agli errori. Accodare spazi bianchi 
      ora è permesso nelle stringhe numeriche per 
      la forza con cui gli spazi bianchi sono trattati. 
      QUesto principalmente interessa: 
     </para>
     <para>
      <simplelist>
       <member>La funzione <function>is_numeric</function></member>
       <member>La comparazione String-to-string</member>
       <member>La dichiarazione dei tipi</member>
       <member>Operazioni di incremento e decremento</member>
      </simplelist>
     </para>
     <para>
      Il concetto di un "leading-numeric string" è 
      stato ancor più rinforzato; i casi in cui questo 
      è rimasto invariato sono in ordine ad una più 
      facile migrazione. Le stringhe che emettono un 
      <constant>E_NOTICE</constant> del tipo: "A non
      well-formed numeric value encountered", ora 
      emetteranno un <constant>E_WARNING</constant> 
      del tipo: "A non-numeric value encountered". 
      E tutte le stringhe che emettono un 
      <constant>E_WARNING</constant> del tipo "A
      non-numeric value encountered"  ora genereranno 
      un <classname>TypeError</classname>. Questo interessa 
      principalmente: 
     </para>
     <para>
      <simplelist>
       <member>Operazioni Arithmetic</member>
       <member>Operazioni Bitwise</member>
      </simplelist>
     </para>
     <para>
      Questo cambiamento da <constant>E_WARNING</constant> 
      a <classname>TypeError</classname> interessa anche l'
      <constant>E_WARNING</constant> del tipo "Illegal 
      string offset 'string'" per gli illegal string offsets. 
      Il comportamento di cast espliciti in int/float 
      a partire da stringhe non è interessato. 
      <!-- RFC: https://wiki.php.net/rfc/saner-numeric-strings -->
     </para>
    </listitem>
    <listitem>
     <para>
      I Magic Methods ora hanno i loro argomenti 
      e ritornano tipi controllati se li hanno 
      dichiarati. Le signatures si possono trovare 
      nella lista seguente: 
     </para>
     <para>
      <simplelist>
       <member><code>__call(string $name, array $arguments): mixed</code></member>
       <member><code>__callStatic(string $name, array $arguments): mixed</code></member>
       <member><code>__clone(): void</code></member>
       <member><code>__debugInfo(): ?array</code></member>
       <member><code>__get(string $name): mixed</code></member>
       <member><code>__invoke(mixed $arguments): mixed</code></member>
       <member><code>__isset(string $name): bool</code></member>
       <member><code>__serialize(): array</code></member>
       <member><code>__set(string $name, mixed $value): void</code></member>
       <member><code>__set_state(array $properties): object</code></member>
       <member><code>__sleep(): array</code></member>
       <member><code>__unserialize(array $data): void</code></member>
       <member><code>__unset(string $name): void</code></member>
       <member><code>__wakeup(): void</code></member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/magic-methods-signature -->
     </para>
    </listitem>
    <listitem>
     <para>
      Le chiavi dell'array <function>call_user_func_array</function> 
      ora possono essere interpretate come nom di 
      parametri, anziché essere silenziosamente 
      ignorate. 
     </para>
    </listitem>
    <listitem>
     <para> 
      Dichiarare una funzione chiamata 
      <literal>assert()</literal> all'interno di 
      un namespace non è più permesso e solleva 
      un <constant>E_COMPILE_ERROR</constant>. 
      La funzione <function>assert</function> è soggetta 
      ad una gestione speciale da parte del motore, 
      e potrebbe dare origine a comportamenti inconsistenti 
      quandosi definisce una funzione namespaced con lo 
      stesso nome. 
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.incompatible.resource2object">
  <title>Migrazione da Resource a Object</title>

  <para>
   Molte &resource; sono state migrate a &object;s. 
   I valori controllati usado <function>is_resource</function> 
   possono essere rimpiazzati eseguendo un controllo per 
   il valore &false;. 
  </para>
  <itemizedlist>
    <listitem>
     <para>
      <function>curl_init</function> ora ritornerà un 
      <classname>CurlHandle</classname> object piuttosto 
      che una &resource;. La funzione <function>curl_close</function> 
      non avrà più effetti, invece l'istanza 
      <classname>CurlHandle</classname> sarà automaticamente 
      distrutta se non è più referenziata. 
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_multi_init</function> ora ritorna 
      un oggetto <classname>CurlMultiHandle</classname> 
      anziché una &resource;. La funzione 
      <function>curl_multi_close</function> non avrà 
      più effetti, invece l'istanza 
      <classname>CurlMultiHandle</classname> è distrutta 
      automaticamente se non è più referenziata. 
     </para>
    </listitem>
    <listitem>
     <para>
      <function>curl_share_init</function> ora 
      ritorna un oggetto <classname>CurlShareHandle</classname> 
      anziché una &resource;. La funzione 
      <function>curl_share_close</function> non avrà 
      più effetti, invece l'istanza 
      <classname>CurlShareHandle</classname> è distrutta 
      automaticamente se non è più referenziata. 
     </para>
    </listitem>
   <listitem>
    <para>
     <function>enchant_broker_init</function> ora 
     ritorna un oggetto <classname>EnchantBroker</classname>
     anziché una &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_request_dict</function> e 
     <function>enchant_broker_request_pwl_dict</function> 
     ora ritornano un oggetto 
     <classname>EnchantDictionary</classname> anziché 
     una &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     L'estensione GD ora usa oggetti 
     <classname>GdImage</classname> come strutture di 
     dati per immagini anziché &resource;s.
     La funzione <function>imagedestroy</function> 
     non ha più effetto; invece l'istanza di 
     <classname>GdImage</classname> è distrutta 
     automaticamente se non è più referenziata. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_x509_read</function> e 
     <function>openssl_csr_sign</function> ora 
     ritornano un oggetto <classname>OpenSSLCertificate</classname> 
     anzichè una &resource;. 
     La funzione <function>openssl_x509_free</function> 
     è deprecata e non ha più alcun effetto, invece 
     l'stanza di <classname>OpenSSLCertificate</classname> 
     è distrutta automaticamente se non è più referenziata. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_csr_new</function> ora ritorna 
     un oggetto 
     <classname>OpenSSLCertificateSigningRequest</classname> 
     anziché una &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>openssl_pkey_new</function> ora ritorna 
     un oggetto <classname>OpenSSLAsymmetricKey</classname> 
     anziché una &resource;.
     La funzione <function>openssl_pkey_free</function> 
     è deprecata e non avrà più alcun effetto, 
     invece l'istanza di 
     <classname>OpenSSLAsymmetricKey</classname> 
     è distrutta automaticamente se non è più referenziata. 
    </para>
   </listitem>
   <listitem>
     <para>
      <function>shmop_open</function> ora ritorna un 
      oggetto  <classname>Shmop</classname> anziché 
      una &resource;. La funzione <function>shmop_close</function> 
      non ha più alcun effetto ed è deprecata; invece 
      l'istanza di <classname>Shmop</classname> viene distrutta 
      automaticamente se non è più referenziata. 
     </para>
    </listitem>
   <listitem>
    <para>
     <function>socket_create</function>, 
     <function>socket_create_listen</function>,
     <function>socket_accept</function>, 
     <function>socket_import_stream</function>, 
     <function>socket_addrinfo_connect</function>, 
     <function>socket_addrinfo_bind</function>, e 
     <function>socket_wsaprotocol_info_import</function> 
     ora ritornano un oggetto 
     <classname>Socket</classname> anziché una &resource;.
     <function>socket_addrinfo_lookup</function> ora ritorna 
     un array di oggetti 
     <classname>AddressInfo</classname> anziché una 
     &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>msg_get_queue</function> ora 
     ritorna un oggetto  <classname>SysvMessageQueue</classname> 
     anziché una &resource;. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>sem_get</function> ora 
     ritorna un oggetto <classname>SysvSemaphore</classname> 
     anziché una &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>shm_attach</function> 
     ora ritorna un oggetto 
     <classname>SysvSharedMemory</classname> 
     anziché una &resource;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>xml_parser_create</function> e 
     <function>xml_parser_create_ns</function> ora 
     ritornano un oggetto <classname>XMLParser</classname> 
     anziché una &resource;. la funzione 
     <function>xml_parser_free</function> non ha 
     più alcun effetto, invece l'istanza di XMLParser
     è distrutta automaticamente se non è più referenziata. 
    </para>
   </listitem>
   <listitem>
    <para>
     Le funzioni <link linkend="book.xmlwriter">XMLWriter</link> 
     ora accettano e ritornano rispettivamente oggetti 
     <classname>XMLWriter</classname> anziché delle &resource;s.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>inflate_init</function> ora ritorna 
     un oggetto <classname>InflateContext</classname> 
     anziché una &resource;. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>deflate_init</function> ora ritorna 
     un oggetto <classname>DeflateContext</classname> 
     anziché una &resource;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.com">
  <title>COM and .Net (Windows)</title>

  <para>
   La possibilità di impportare costanti 
   case-insensitive da librerie dei tipi 
   è stata rimossa. Il secondo argomento 
   per <function>com_load_typelib</function> 
   non potrà più essere false; 
   <link linkend="ini.com.autoregister-casesensitive">com.autoregister_casesensitive</link>
   non potrà più essere disabilitato;bled; 
   i marcatori case-insensitive in 
   <link linkend="ini.com.typelib-file">com.typelib_file</link> 
   sono ignorati. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.curl">
  <title>CURL</title>

  <para>
   <constant>CURLOPT_POSTFIELDS</constant> non restituirà 
   più oggetti come array. Per interpretare un di questi 
   oggetti come un array sarà necessario eseguire una 
   trasformazione (cast) esplicita in <code>(array)</code>. 
   Lo stesso si applica alle altre opzioni che accettano 
   array, ovviamente. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.datetime">
  <title>Date e Time</title>

  <para>
   <function>mktime</function> e 
   <function>gmmktime</function> ora richiedono 
   almeno un argomento. <function>time</function> 
   può essere usata per ottenere il timestamp corrente. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.dom">
  <title>DOM</title>

  <para>
   Le classi non implementate per l'estensione 
   DOM che non danno reazioni e non contengono 
   dati testati sono state rimosse. Queste classi 
   sono anche state rimosse nell'ultima versione 
   standard di DOM: 
  </para>
  <para>
   <simplelist>
    <member>DOMNameList</member>
    <member>DomImplementationList</member>
    <member>DOMConfiguration</member>
    <member>DomError</member>
    <member>DomErrorHandler</member>
    <member>DOMImplementationSource</member>
    <member>DOMLocator</member>
    <member>DOMUserDataHandler</member>
    <member>DOMTypeInfo</member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>enchant_broker_list_dicts</function>, 
     <function>enchant_broker_describe</function> e 
     <function>enchant_dict_suggest</function> 
     ora restituiscono un array vuoto anziché un 
     valore &null;.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.exif">
  <title>Exif</title>

  <para>
   <function>read_exif_data</function> è stata rimossa; 
   <function>exif_read_data</function> può essere 
   ustaa al suo posto. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.filter">
  <title>Filter</title>

  <itemizedlist>
   <listitem>
    <para>
     Le opzioni <constant>FILTER_FLAG_SCHEME_REQUIRED</constant> 
     e <constant>FILTER_FLAG_HOST_REQUIRED</constant> per il 
     filtro <constant>FILTER_VALIDATE_URL</constant> sono state 
     rimosse. Lo <literal>scheme</literal>
     e l'<literal>host</literal> sono comunque richiesti. 
    </para>
   </listitem>
   <listitem>
    <para>
     I valori <constant>INPUT_REQUEST</constant> e 
     <constant>INPUT_SESSION</constant> per 
     <function>filter_input</function> etc. sono 
     stati rimossi. Non erano mai stati implementati 
     e generavano sempre degli allarmi. 
    </para> 
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gd">
  <title>GD</title>

  <itemizedlist>
   <listitem>
    <para>
     Le funzioni deprecate 
     <function>image2wbmp</function> sono state rimosse. 
     <!-- RFC: https://wiki.php.net/rfc/image2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     Le funzioni deprecate 
     <function>png2wbmp</function> e 
     <function>jpeg2wbmp</function> sono state rimosse. 
     <!-- RFC: https://wiki.php.net/rfc/deprecate-png-jpeg-2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     Il valore predefinito del parametro 
     <parameter>mode</parameter> della funzione 
     <function>imagecropauto</function> non accetta 
     più <literal>-1</literal>come impostazione. 
     <constant>IMG_CROP_DEFAULT</constant> può essere usata 
     al suo posto. 
    </para>
   </listitem>
   <listitem>
    <para>
     Su Windows, <filename>php_gd2.dll</filename> 
     è stato rinominato <filename>php_gd.dll</filename>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gmp">
  <title>GMP</title>

  <para>
   <function>gmp_random</function> è stata rimossa. 
   <function>gmp_random_range</function> o 
   <function>gmp_random_bits</function> 
   possono essere usate al suo posto. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.iconv">
  <title>Iconv</title>

  <para>
   Le implementazioni di iconv che non impostano 
   correttamente <varname>errno</varname> in caso 
   di errori non sono più supportate. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.imap">
  <title>IMAP</title>

  <itemizedlist>
   <listitem>
    <para>
     L'argomento inutilizzato <parameter>default_host</parameter> 
     della funzione <function>imap_headerinfo</function>
     è stato rimosso. 
    </para>
   </listitem>
   <listitem>
    <para>
     La funzione <function>imap_header</function> 
     che è un alaias di <function>imap_headerinfo</function> 
     è stata rimossa. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.intl">
  <title>Internationalization Functions</title>

  <itemizedlist>
   <listitem>
    <para>
     La costante deprecata 
     <constant>INTL_IDNA_VARIANT_2003</constant> 
     è stata rimossa. 
     <!-- RFC: https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003 -->
    </para>
   </listitem>
   <listitem>
   <para>
    La costante deprecata  
    <constant>Normalizer::NONE</constant> 
    è stata rimossa. 
   </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.ldap">
  <title>LDAP</title>

  <itemizedlist>
   <listitem>
   <para>
    Le funzioni deprecate 
    <function>ldap_sort</function>,
    <function>ldap_control_paged_result</function> e 
    <function>ldap_control_paged_result_response</function> 
    sono state rimosse. 
   </para>
  </listitem>
  <listitem>
   <para>
    L'intefaccia di 
    <function>ldap_set_rebind_proc</function> è cambiata; 
    il parametro <parameter>callback</parameter> 
    non accetta più stringhe vuote; in alternativa 
    è possibile utilizzare il valore &null;. 
   </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.mbstring">
  <title>MBString</title>

  <itemizedlist>
   <listitem>
    <para>
     la direttiva 
     <link linkend="ini.mbstring.func-overload">mbstring.func_overload</link> 
     è sta rimossa. Le costanti correlate <constant>MB_OVERLOAD_MAIL</constant>,
     <constant>MB_OVERLOAD_STRING</constant>, e 
     <constant>MB_OVERLOAD_REGEX</constant> 
     sono state rimosse anch'esse. Inoltre, le entries 
     <literal>"func_overload"</literal> e 
     <literal>"func_overload_list"</literal> della funzione 
     <function>mb_get_info</function> sono state rimosse. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_parse_str</function> non potrà più 
     essere ustaa senza specificare un array di risultati. 
    </para>
   </listitem>
   <listitem>
    <para>
     Un certo numero di mbregex deprecate è stato 
     rimosso. Il seguente elenco illustra le funzioni 
     che le hanno sostituite: 
    </para>
    <para>
     <simplelist>
      <member><function>mbregex_encoding</function> → <function>mb_regex_encoding</function></member>
      <member><function>mbereg</function> → <function>mb_ereg</function></member>
      <member><function>mberegi</function> → <function>mb_eregi</function></member>
      <member><function>mbereg_replace</function> → <function>mb_ereg_replace</function></member>
      <member><function>mberegi_replace</function> → <function>mb_eregi_replace</function></member>
      <member><function>mbsplit</function> → <function>mb_split</function></member>
      <member><function>mbereg_match</function> → <function>mb_ereg_match</function></member>
      <member><function>mbereg_search</function> → <function>mb_ereg_search</function></member>
      <member><function>mbereg_search_pos</function> → <function>mb_ereg_search_pos</function></member>
      <member><function>mbereg_search_regs</function> → <function>mb_ereg_search_regs</function></member>
      <member><function>mbereg_search_init</function> → <function>mb_ereg_search_init</function></member>
      <member><function>mbereg_search_getregs</function> → <function>mb_ereg_search_getregs</function></member>
      <member><function>mbereg_search_getpos</function> → <function>mb_ereg_search_getpos</function></member>
      <member><function>mbereg_search_setpos</function> → <function>mb_ereg_search_setpos</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     Il modificatore <literal>e</literal> per la 
     funzione <function>mb_ereg_replace</function> 
     è stato rimosso. Al suo posto sarà possibile 
     usare <function>mb_ereg_replace_callback</function> . 
    </para>
   </listitem>
   <listitem>
    <para>
     i modelli non-string, argomenti della funzione 
     <function>mb_ereg_replace</function> ora saranno 
     interpretati come una stringa anziché come un 
     ASCII codepoint. Il comportamento precedente al 
     cambiament può essere ripristinando invocando 
     una chiamata a <function>chr</function> sul modello. 
    </para>
   </listitem>
   <listitem>
    <para>
     Il parametro <parameter>needle</parameter> 
     argomanto delle funzioni <function>mb_strpos</function>,
     <function>mb_strrpos</function>, <function>mb_stripos</function>,
     <function>mb_strripos</function>, <function>mb_strstr</function>,
     <function>mb_stristr</function>, <function>mb_strrchr</function> e 
     <function>mb_strrichr</function> ora può essere vuoto. 
    </para>
   </listitem>
   <listitem>
    <para>
     Il parametro <parameter>is_hex</parameter>, 
     chenon era usato internamente, è stato rimosso 
     dalla funzione <function>mb_decode_numericentity</function>. 
    </para>
   </listitem>
   <listitem>
    <para>
     Il comportamento lecito di passare la 
     codifica come terzo argomento anziché un 
     offset per la funzione <function>mb_strrpos</function> 
     è stato rimosso; un offset esplicito di <literal>0</literal>
     con la codifica può essere fornito come quarto 
     argomento al suo posto. 
    </para>
   </listitem>
   <listitem>
    <para>
     la codifica degli aliases dei caratteri 
     <literal>ISO_8859-*</literal> è stata rimpiazzata 
     dalla <literal>ISO8859-*</literal> per una 
     migliore interoperabilità con le estensioni iconv. 
     Gli aliases mbregex ISO 8859 con sottolineature 
     (<literal>ISO_8859_*</literal> e 
     <literal>ISO8859_*</literal>) sono stati rimossi 
     anch'essi. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>mb_ereg</function> e 
     <function>mb_eregi</function> ora ritorneranno un 
     boolean &true; su un confronto andato a buon fine. 
     Precedentemente restituivano un integer del valore 
     di <literal>1</literal> se <parameter>matches</parameter> 
     non era passato o <code>max(1, strlen($matches[0]))</code> 
     se <parameter>matches</parameter> era passato. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.oci8">
  <title>OCI8</title>

  <itemizedlist>
   <listitem>
    <para>
     La classe <classname>OCI-Lob</classname> 
     ora è chiamata <classname>OCILob</classname>, 
     e la classe <classname>OCI-Collection</classname> 
     ora è chiamata <classname>OCICollection</classname> 
     per la strumentazione della compilazione rinforzata 
     dei nomi di argomenti di tipo info di PHP 8. 
    </para>
   </listitem>
   <listitem>
    <para>
     Molte funzioni alias sono sate marcate come deprecate. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>oci_internal_debug</function> e i 
     suoi alias <function>ociinternaldebug</function> 
     sono stati rimossi. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.odbc">
  <title>ODBC</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>odbc_connect</function> 
     non riutilizzerà le connessioni. 
    </para>
   </listitem>
   <listitem>
    <para>
     I parametri <parameter>flags</parameter> 
     della funzione <function>odbc_exec</function> 
     son stati rimossi. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.openssl">
  <title>OpenSSL</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>openssl_seal</function> e 
     <function>openssl_open</function> ora richiedono 
     <parameter>method</parameter> per essre passate 
     come il precedente valore predefinito 
     <literal>"RC4"</literal> è considerato non sicuro. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pcre">
  <title>Regular Expressions (Perl-Compatible)</title>

  <para>
   Quando si passa una sequenza di escape non 
   valida, non verrà più interpretata come dei 
   literals. 
   Questo comportamento precedentemente richiedeva 
   l'uso del modificatore <literal>X</literal> 
   che ora viene ignorato. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo">
  <title>PHP Data Objects</title>

  <itemizedlist>
   <listitem>
    <para>
     La gestione deglierrori predefinita è 
     stata cambiata da "silent" a "exceptions". 
     Vedere 
     <link linkend="pdo.error-handling">Errors and error handling</link> 
     per i dettagli. 
     <!-- RFC: https://wiki.php.net/rfc/pdo_default_errmode -->
    </para>
   </listitem>
   <listitem>
    <para>
     Le signatures per alcuni metodi PDO sono cambiate: 
    </para>
    <para>
     <simplelist>
      <member><code>PDO::query(string $query, ?int $fetchMode  = null, mixed  ...$fetchModeArgs)</code></member>
      <member><code>PDOStatement::setFetchMode(int $mode, mixed ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-odbc">
  <title>PDO ODBC</title>

  <para>
   La direttiva &php.ini; 
   <link linkend="ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</link> 
   è stata rimossa. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-mysql">
  <title>PDO MySQL</title>

  <para>
   <methodname>PDO::inTransaction</methodname> 
   ora riporta lo stato della connessione 
   della transazione attuale anziché una aprossimazione 
   mantenuta da PDO. Se viene eseguita una query 
   soggetta a "implicit commit" , 
   <methodname>PDO::inTransaction</methodname> 
   ritornerà conseguentemente &false;, se la 
   transazione non è più attiva. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pgsql">
  <title>PostgreSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     La sintasssi deprecata <function>pg_connect</function> 
     che usa parametri multipli anziché una stringa 
     di connessione, non è più supportata. 
    </para>
   </listitem>
   <listitem>
    <para>
     Le segnature deprecate <function>pg_lo_import</function> 
     e <function>pg_lo_export</function> che 
     passano la connessione come ultimo argomento, 
     non sono più supportate. La connessione può 
     comunque essere passata come primo argomento. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>pg_fetch_all</function> ora ritorna na 
     array vuoto anziché &false; come set di risultato 
     con zero righe. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.phar">
  <title>Phar</title>

  <para>
   I metadati associati ad un phar, non 
   saranno più deserializzati automaticamente, 
   per correggere alcune vulnerabilità si dovrà 
   istanziare un oggetto etc. 
   <!-- RFC: https://wiki.php.net/rfc/phar_stop_autoloading_metadata -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     Le signatures dei metodi 
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($args)</code></member>
      <member><code>ReflectionFunction::invoke($args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $args)</code></member>
     </simplelist>
    </para>
    <para>
     sono cambiate a: 
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance(...$args)</code></member>
      <member><code>ReflectionFunction::invoke(...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, ...$args)</code></member>
     </simplelist>
    </para>
    <para>
     Il codice che deve essere compatibile 
     sia con PHP 7 che con PHP 8 può usare 
     le seguenti signatures per rimanere 
     compatibile con entrambe le versioni: 
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($arg = null, ...$args)</code></member>
      <member><code>ReflectionFunction::invoke($arg = null, ...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $arg = null, ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     Il metodo <methodname>ReflectionType::__toString</methodname> 
     ora ritornerà una rappresentazione completa 
     del debug del tipo, e non è più deprecato. 
     In particolare il risultato include un 
     nullability indicator per i tipi nullable. 
     Il formato dei valori di ritorno non è stabile 
     e potrebbe cambiare tra le versioni di PHP. 
    </para>
   </listitem>
   <listitem>
    <para>
     I metodi per la Reflection export() 
     sono stati rimossi. Gli oggetti reflection 
     possono essere trasformati in stringhe per 
     sopperire. 
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionMethod::isConstructor</methodname> e 
     <methodname>ReflectionMethod::isDestructor</methodname> 
     ora ritornano &true; per i metodi di interfaccia 
     <link linkend="object.construct">__construct()</link> e 
     <link linkend="object.destruct">__destruct()</link>. 
     Precedentemente questo poteva essere true 
     solop er i metodi id classe e i traits. 
    </para>
   </listitem>
   <listitem>
    <para>
     Il metodo <methodname>ReflectionType::isBuiltin</methodname> 
     è stato rimosso da <classname>ReflectionNamedType</classname>. 
     <classname>ReflectionUnionType</classname> non ce l'ha. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sockets">
  <title>Sockets</title>

  <itemizedlist>
   <listitem>
    <para>
     Le opzioni deprecate 
     <constant>AI_IDN_ALLOW_UNASSIGNED</constant> e 
     <constant>AI_IDN_USE_STD3_ASCII_RULES</constant> 
     <parameter>flags</parameter> per 
     <function>socket_addrinfo_lookup</function> 
     sono state rimosse. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>SplFileObject::fgetss</methodname> 
     è stata rimossa. 
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplFileObject::seek</methodname> 
     ora controlla sempre all'inizio della linea. 
     Precedentemente posizioni <literal>=1</literal> 
     ricercavano all'inizio della linea successiva. 
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplHeap::compare</methodname> ora 
     specifica un metodo di signature. Le classi 
     nidificate che implementano questo metodo ora 
     devono usare metodi di signature compatibili. 
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplDoublyLinkedList::push</methodname>,
     <methodname>SplDoublyLinkedList::unshift</methodname> e 
     <methodname>SplQueue::enqueue</methodname> 
     opa ritornano <type>void</type> anziché &true;. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>spl_autoload_register</function> ora 
     genererà sempre un <classname>TypeError</classname> 
     su argomenti non validi, comunque il scondo argomento 
     <parameter>do_throw</parameter> è ignorato e viene emessa 
     una notice se è impostato a &false;. 
    </para>
   </listitem>
   <listitem>
    <para>
     <classname>SplFixedArray</classname> è ora un 
     <interfacename>IteratorAggregate</interfacename> 
     e no un <interfacename>Iterator</interfacename>. 
     <methodname>SplFixedArray::rewind</methodname>, 
     <methodname>SplFixedArray::current</methodname>, 
     <methodname>SplFixedArray::key</methodname>, 
     <methodname>SplFixedArray::next</methodname>, e 
     <methodname>SplFixedArray::valid</methodname> sono 
     stat rimossi. Al loro posto, 
     <methodname>SplFixedArray::getIterator</methodname> 
     è stato aggiunto. Qualunque codice che faccia 
     uso di iterazioni esplicite su SplFixedArray 
     deve ora ottenere un 
     <interfacename>Iterator</interfacename> attraverso 
     <methodname>SplFixedArray::getIterator</methodname>. 
     Questo significa che <classname>SplFixedArray</classname> 
     ora è sicuro da usare nei cicli nidificati. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.standard">
  <title>Standard Library</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>assert</function> non valuterà più 
     argomenti stringa, nel caso, essi saranno 
     trattati come ogni altro argomento. 
     <code>assert($a == $b)</code> può essere usato 
     al posto di 
     <code>assert('$a == $b')</code>. 
     la direttiva ini 
     <link linkend="ini.assert.quiet-eval">assert.quiet_eval</link> 
     e la costante 
     <constant>ASSERT_QUIET_EVAL</constant> sono state 
     rimosse anch'esse così esse non avranno più alcun effetto. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_str</function> non potrà 
     più venire usata senza specificare un array 
     per i risultati. 
    </para>
   </listitem>
   <listitem>
    <para>
     Il filtro 
     <link linkend="filters.string.strip_tags">string.strip_tags</link> 
     è stato rimosso. 
    </para>
   </listitem>
   <listitem>
    <para>
     L'argomento <parameter>needle</parameter> 
     delle funzioni <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, 
     <function>strripos</function>, <function>strstr</function>, 
     <function>strchr</function>, <function>strrchr</function>, e 
     <function>stristr</function> ora sarà sempre interpretato 
     come una stringa. Precedentemente i needle non-string 
     erano interpretati come degli ASCII code point. una 
     chiamata esplicita a <function>chr</function> può 
     venire usata per ripristinare il comportamento precedente. 
    </para>
   </listitem>
   <listitem>
    <para>
     L'argomento <parameter>needle</parameter> 
     per le funzioni <function>strpos</function>, 
     <function>strrpos</function>, <function>stripos</function>, 
     <function>strripos</function>, <function>strstr</function>, 
     <function>stristr</function> e <function>strrchr</function> 
     ora può essere anche vuoto. 
    </para>
   </listitem>
   <listitem>
    <para>
     L'argomento <parameter>length</parameter> delle 
     funzioni <function>substr</function>, 
     <function>substr_count</function>, 
     <function>substr_compare</function>, e 
     <function>iconv_substr</function> ora può essere &null;. 
     I valori &null; si comportano come argomenti 
     senza lunghezza e comunque ritornano un promemoria 
     come se si fosse tentato di nidificare una stringa 
     dentro una stringa vuota. 
    </para>
   </listitem>
   <listitem>
    <para>
     L'argomento <parameter>length</parameter> per 
     la funzione <function>array_splice</function> ora può 
     essere &null;. I valori &null; generano le stesso 
     comportamento dell'omissione degli argomenti, così 
     si è rimossa qualunque cosa dall'<parameter>offset</parameter> 
     alla fine dell'array. 
    </para>
   </listitem>
   <listitem>
    <para>
     L'argomento <parameter>args</parameter> delle 
     funzioni <function>vsprintf</function>,
     <function>vfprintf</function>, e 
     <function>vprintf</function> ora deve essere un 
     array. Precedentemente era accettao qualunque tipo. 
    </para>
   </listitem>
   <listitem>
    <para>
     L'opzione <literal>'salt'</literal> per la funzione 
     <function>password_hash</function> non è più 
     supportata. Se viene usata si genererà un allarme, 
     il 'salt' pssato verrà ignorato e ne verrà 
     generato uno al suo posto. 
    </para>
   </listitem>
   <listitem>
    <para>
     La funzione <function>quotemeta</function> 
     ora ritornerà una stringa vuota se e viene 
     passata una stringa vuota. Precedentemente 
     ritornava &false;. 
    </para>
   </listitem>
   <listitem>
    <para>
     Le seguenti funzioni sono state rimosse: 
    </para>
    <para>
     <simplelist>
      <member><function>hebrevc</function></member>
      <member><function>convert_cyr_string</function></member>
      <member><function>money_format</function></member>
      <member><function>ezmlm_hash</function></member>
      <member><function>restore_include_path</function></member>
      <member><function>get_magic_quotes_gpc</function></member>
      <member><function>get_magic_quotes_runtime</function></member>
      <member><function>fgetss</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>FILTER_SANITIZE_MAGIC_QUOTES</constant> 
     è stata rimossa. 
    </para>
   </listitem>
   <listitem>
    <para>
     Chiamare <function>implode</function> con parametri 
     in ordine invertito <code>($pieces, $glue)</code> 
     non è più supportato. 
    </para> 
   </listitem>
   <listitem>
    <para>
     <function>parse_url</function> ora distingue 
     l'assenza di query dalle query vuote e dai frammenti: 
    </para>
    <para>
     <simplelist>
      <member><code>http://example.com/foo → query = null, fragment = null</code></member>
      <member><code>http://example.com/foo? → query = "",   fragment = null</code></member>
      <member><code>http://example.com/foo# → query = null, fragment = ""</code></member>
      <member><code>http://example.com/foo?# → query = "",   fragment = ""</code></member>
     </simplelist>
      Precedentemente tutti i casi di frammenti 
      e qury vuote davano &null; come risultato. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>var_dump</function> e <function>debug_zval_dump</function> 
     ora stampano numeri in virgola mobile usando 
     <link linkend="ini.serialize-precision">serialize_precision</link> 
     anziché <link linkend="ini.precision">precision</link>. 
     In una configurazione di default questo significa che 
     i numeri in virgola mobile ora sono emessi con un'accuratezza 
     completa dalle loro funzioni di debug. 
    </para>
   </listitem>
   <listitem>
    <para>
     Se l'array restituito da <link linkend="object.sleep">__sleep()</link> 
     contiene proprietà inesitenti, queste ora vengono ignorate 
     silenziosamente. Precedentemente queste proprietà 
     potevano essere serializzate come se avessero avuto valore &null;. 
    </para>
   </listitem>
   <listitem>
    <para>
     Il valore predefinito di locale all'avvio ora è 
     sempre <literal>"C"</literal>. Nessun locale 
     viene dedotto dall'ambiente di sviluppo per 
     impostazione predefinita. Precedentemente 
     <constant>LC_ALL</constant> era impostato su 
     <literal>"C"</literal>, mentre <constant>LC_CTYPE</constant> 
     veniva dedotto dal sistema. Comunque, alcune funzioni 
     non rispettavano il 'locale' dedotto senza una chiamata 
     esplicita a <function>setlocale</function>. Una chiamata 
     esplicita a <function>setlocale</function> ora è sempre 
     richiesta se il componente 'locale' deve essere cambiato 
     dalla sua impostazione predefinita. 
    </para>
   </listitem>
   <listitem>
    <para>
     Il fallback deprecato DES in <function>crypt</function> 
     è stato rimosso. Se viene passato un formato di 'salt' 
     sconosciuto a <function>crypt</function>, la funzione 
     fallirà con uno <literal>*0</literal> anziché 
     fallire con un algoritmo DES hash debole. 
    </para>
   </listitem>
   <listitem>
    <para>
     Specificare parametri fuori dallintervallo 
     per SHA256/SHA512 <function>crypt</function> 
     porterà al fallimento dell'esecuzione con 
     <literal>*0</literal> anziché con il passaggio 
     al limite di chiiusura. Questo rispetta il comportamento 
     della libreria glibc: 
    </para>
   </listitem>
   <listitem>
    <para>
     Il risultato delle funzioni di ordinamento 
     potrebbe essere cambiato, nel caso in cui 
     l'array contenga elementi che sono uguali. 
     equal.
    </para>
   </listitem>
   <listitem>
    <para> 
     Ogni funzione che accetta chiamate per cui 
     non sia esplicitamente specificato di accettare 
     parametri per riferimento, genererà un allarme se 
     si tenta di chiamarla passandole dei parametri 
     per riferimento. Son icluse a titolo di esmpio 
     <function>array_filter</function> e 
     <function>array_reduce</function>. Questo era già 
     definito per molte funzioni in precedenza ma non 
     per tutte. 
    </para>
   </listitem>
   <listitem>
    <para>
     Lo stream wrapper HTTP usato da fuzioni come 
     <function>file_get_contents</function> ora, per 
     impostazione predefinita, emette degli avvertimenti 
     che rispettano il protocollo HTTP/1.1 anziché 
     HTTP/1.0. Questo non cambia il comportamento per i 
     client ma potrebbe causare risposte differenti dei 
     server. Per mantenere il vecchio comportamento impostare 
     l'opzione per il contesto di stream 
     <literal>'protocol_version'</literal> ad es. 
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['http' => ['protocol_version' => '1.0']]);
echo file_get_contents('http://example.org', false, $ctx);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Chiamare <function>crypt</function> senza un 'salt' 
     esplicito non è più supportato. per produrre un 
     codice di controllo forte con un 'salt' auto generato 
     si dovrà usare <function>password_hash</function>. 
    </para>
   </listitem>
   <listitem>
    <para>
    <function>substr</function>, <function>mb_substr</function>, 
    <function>iconv_substr</function> e 
    <function>grapheme_substr</function> ora catturano 
    efficacemente caratteri oltre il limite della stringa 
    legandoli. Precedentemente era ritornato un valore &false; 
    anziché una stringa vuota. 
    </para>
   </listitem>
   <listitem>
    <para>
     Su Windows, le funzioni di esecuzione del programma 
     (<function>proc_open</function>, <function>exec</function>, 
     <function>popen</function> etc.) usano la shell, 
     ora si possono eseguire con forza con  
     <command>%comspec% /s/c "$commandline"</command>, 
     che ha lo stesso effetto di eseguire 
     <command>$commandline</command> (senza caratteri aggiuntivi). 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sysvsem">
  <title>Sysvsem</title>

  <itemizedlist>
   <listitem>
    <para>
     Il parametro <parameter>auto_release</parameter> 
     della funzione <function>sem_get</function> è cambiato 
     per accettare valori bool piuttosto che int. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tidy">
  <title>Tidy</title>

  <itemizedlist>
   <listitem>
    <para>
     Il parametro <parameter>use_include_path</parameter> 
     che non era usato internamente, è stato rimosso 
     da <function>tidy_repair_string</function>. 
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>tidy::repairString</methodname> e
     <methodname>tidy::repairFile</methodname> sono 
     diventate metodi statici. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tokenizer">
  <title>Tokenizer</title>

  <itemizedlist>
   <listitem>
    <para>
     <literal>T_COMMENT</literal> tokens 
     non icluderanno più un carattere finale di newline. 
     La newline sarà invece parte del seguente token 
     <literal>T_WHITESPACE</literal>. Si può notare che 
     <literal>T_COMMENT</literal> non è più seguito da spazi 
     bianchi, ma può comunque essere seguito dal 
     <literal>T_CLOSE_TAG</literal> o end-of-file(EOF). 
    </para>
   </listitem>
   <listitem>
    <para>
     I nomi di namespaced ora sono rappresentati usando 
     i tokens <literal>T_NAME_QUALIFIED</literal>
     (<code>Foo\Bar</code>), 
     <literal>T_NAME_FULLY_QUALIFIED</literal> (<code>\Foo\Bar</code>) e 
     <literal>T_NAME_RELATIVE</literal> (<code>namespace\Foo\Bar</code>).
     <literal>T_NS_SEPARATOR</literal> è usato solo per
     namespace separators di tipo standalone, e sono 
     sintatticamente validi solo se usati in congiunzione 
     con dichiarazioni di group use. 
     <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlreader">
  <title>XMLReader</title>

  <para>
   <methodname>XMLReader::open</methodname> e 
   <methodname>XMLReader::xml</methodname> ora sono 
   metodi statici. Possono ancora essere chiamati 
   come metodi di istanza, ma le classi nidificate 
   devono dichiararli come statici se sovrascrivono 
   questi metodi. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlrpc">
  <title>XML-RPC</title>

  <para>
   Le estensioni XML-RPC sono state rimosse 
   da PECL e nonsaranno più parte delle distribuzioni 
   di PHP. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zip">
  <title>Zip</title>

  <para>
   <constant>ZipArchive::OPSYS_Z_CPM</constant> 
   è stato rimosso (questo nome era un alias). Usare 
   <constant>ZipArchive::OPSYS_CPM</constant> al suo posto. 
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zlib">
  <title>Zlib</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>gzgetss</function> è stato rimosso. 
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zlib.output-compression">zlib.output_compression</link> 
     non sarà più disabilitato automaticamente per 
     <literal>Content-Type: image/*</literal>. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.php-test-packs">
  <title>Windows PHP Test Packs</title>

  <para>
   Il test runner è stato rinominato da 
   <filename>run-test.php</filename> a 
   <filename>run-tests.php</filename>, 
   per uniformare il suo nome a quello di 
   php-src. 
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
