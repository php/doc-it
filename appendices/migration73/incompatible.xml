<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="migration73.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Cambiamenti non compatibili all'indietro</title>

 <sect2 xml:id="migration73.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration73.incompatible.core.heredoc-nowdoc">
   <title>Heredoc/Nowdoc Ending Label Interpretation</title>

   <para>
    Dovuta all'introduzione di 
    <link linkend="migration73.new-features.core.heredoc">
    flexible heredoc/nowdoc syntax</link>, 
    documenti stringa che contengono un'etichetta 
    di fine documento all'interno del loro corpo e 
    potrebbero causare errori sintattici o cambiamenti 
    di interpretazione. Per esempio in:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$str = <<<FOO
abcdefg
   FOO
FOO;
?>
]]>
     </programlisting>
    </informalexample>
    L'occorenza incidentata di <literal>FOO</literal> 
    precedentemente non aveva un significato particolare. 
    Ora essa è interpretata come la fine della stringa 
    heredoc e il successivo <literal>FOO;</literal> 
    causa un errore di sintassi. Questo problema 
    può sempre essere risolto scegliendo un'etichetta 
    di fine documento che non ha occorrenze all'interno 
    del contenuto della stringa.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.continue-targeting-switch">
   <title>Continue Targeting Switch issues Warning</title>

   <para>
    Lo statement (istruzione) <literal>continue</literal> 
    porta con se una deviazione (<literal>switch</literal>)
    controllata delle strutture del flusso del 
    codice, ora genera un allarme del seguente tipo: 
    In PHP l'istruzione 
    <literal>continue</literal> è equivalente a 
    <literal>break</literal>, si comporta come 
    <literal>continue 2</literal> di altri linguaggi.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
while ($foo) {
    switch ($bar) {
      case "baz":
         continue;
         // Warning: "continue" targeting switch is equivalent to
         //          "break". Did you mean to use "continue 2"?
   }
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.arrayaccess">
   <title>Interpretazione stretta delle Integer String Keys su ArrayAccess</title>

   <para>
    Gliaccessi agli array del tipo 
    <literal>$obj["123"]</literal>, dove 
    <literal>$obj</literal> implementa la classe 
    <classname>ArrayAccess</classname> e 
    <literal>"123"</literal> è un integer 
    <type>string</type> letterale, non darà più 
    come risultato una conversione implicita in
    un integer, cioè:
    <literal>$obj->offsetGet("123")</literal> 
    verrà chiamata al posto di 
    <literal>$obj->offsetGet(123)</literal>. 
    Questo corrisponde al comportamento attuale 
    per i non-litterals. Il comportamento degli 
    array non viene condizionato in alcun modo, 
    essi continueranno implicitamente a convertire 
    stringhe di numeri in integers.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.static-properties">
   <title>Proprietà Static non più separate da Reference Assignment</title>

   <para>
    In PHP, le proprietà statiche sono 
    condivise tra classi  nidificate a meno che 
    la proprietà statica non sia esplicitamente 
    sovraccaricata (overriden) in una classe figlia. 
    Comunque, sfruttando un artificio nell'implementazione,
    era possibile separare le proprietà statiche assegnando 
    una referenza. QUesto bug è stato risolto.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class Test {
    public static $x = 0;
}
class Test2 extends Test { }

Test2::$x = &$x;
$x = 1;

var_dump(Test::$x, Test2::$x);
// Previously: int(0), int(1)
// Now:        int(1), int(1)
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.reference-unwrapping">
   <title>References ritornate come Array e Property Accesses immediatamente svelate</title>

   <para>
    Le references sono restituite come array 
    e le proprità di accesso ora sono esposte 
    come parte dell'accesso. Questo significa 
    che non è più possibile modificare le referenze 
    tra l'accesso e l'uso del valore a cui si è 
    avuto accesso:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr = [1];
$ref =& $arr[0];
var_dump($arr[0] + ($arr[0] = 2));
// Previously: int(4), Now: int(3)
?>
]]>
     </programlisting>
    </informalexample>
    Questo rende il comportamento delle 
    references e delle non-references più 
    consistente. Fa piacere notare che leggere 
    e scrivere un valore all'interno di una 
    singola espressione resta un comportamento 
    indefinito e potrebbe venire modificato 
    ulteriormente in futuro. 
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.traversable-unpacking">
   <title>Argomento Unpacking dei Traversables con non-Integer Keys non più supportato</title>

   <para>
    L'argomento unpacking lavora con la classe 
    <classname>Traversable</classname> con chiavi 
    non-integer. Il seguente codice lavorava 
    in PHP 5.6-7.2 in modo accidentato.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(...$args) {
    var_dump($args);
}
function gen() {
    yield 1.23 => 123;
}
foo(...gen());
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.misc">
   <title>Miscellaneous</title>


  <sect3 xml:id="migration73.incompatible.core.misc">
   <title>Miscellaneous</title>

   <para>
    The <filename>ext_skel</filename> utility has been completely redesigned with
    new options and some old options removed. This is now written in PHP and has
    no external dependencies.
   </para>

   <para>
    Support for BeOS has been dropped.
   </para>

   <para>
    Exceptions thrown due to automatic conversion of warnings into exceptions in
    <literal>EH_THROW</literal> mode (e.g. some <classname>DateTime</classname>
    exceptions) no longer populate <function>error_get_last</function> state. As
    such, they now work the same way as manually thrown exceptions.
   </para>

   <para>
    <classname>TypeError</classname> now reports wrong types as
    <literal>int</literal> and <literal>bool</literal> instead of
    <literal>integer</literal> and <literal>boolean</literal>, respectively.
   </para>

   <para>
    Undefined variables passed to <function>compact</function> will now be
    reported as a notice.
   </para>

   <para>
    <function>getimagesize</function> and related functions now report the mime
    type of BMP images as <literal>image/bmp</literal> instead of
    <literal>image/x-ms-bmp</literal>, since the former has been registered with
    the IANA (see <link xlink:href="&url.rfc;7903">RFC 7903</link>).
   </para>

   <para>
    <function>stream_socket_get_name</function> will now return IPv6 addresses
    wrapped in brackets. For example <literal>"[::1]:1337"</literal> will be
    returned instead of <literal>"::1:1337"</literal>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration73.incompatible.bc">
  <title>BCMath Arbitrary Precision Mathematics</title>

  <para>
   All warnings thrown by <link linkend="ref.bc">BCMath functions</link> are
   now using PHP's error handling. Formerly some warnings have directly been
   written to stderr.
  </para>

  <para>
   <function>bcmul</function> and <function>bcpow</function> now return numbers
   with the requested scale. Formerly, the returned numbers may have omitted
   trailing decimal zeroes.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.imap">
  <title>IMAP, POP3 and NNTP</title>

  <para>
   <command>rsh</command>/<command>ssh</command> logins are disabled by default.
   Use <link
   linkend="ini.imap.enable-insecure-rsh">imap.enable_insecure_rsh</link> if you
   want to enable them. Note that the IMAP library does not filter mailbox names
   before passing them to the <command>rsh</command>/<command>ssh</command>
   command, thus passing untrusted data to this function with
   <command>rsh</command>/<command>ssh</command> enabled is insecure.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mbstring">
  <title>Multibyte String</title>

  <para>
    Due to added support for named captures, <literal>mb_ereg_*()</literal>
    patterns using named captures will behave differently. In particular named
    captures will be part of matches and <function>mb_ereg_replace</function>
    will interpret additional syntax. See <link
    linkend="migration73.new-features.mbstring.named-captures">Named
    Captures</link> for more information.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mysqli">
  <title>MySQL Improved Extension</title>

  <para>
   Prepared statements now properly report the fractional seconds for
   <literal>DATETIME</literal>, <literal>TIME</literal> and
   <literal>TIMESTAMP</literal> columns with decimals specifier (e.g.
   <literal>TIMESTAMP(6)</literal> when using microseconds). Formerly, the
   fractional seconds part was simply omitted from the returned values.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.pdo-mysql">
  <title>MySQL Functions (PDO_MYSQL)</title>

  <para>
   Prepared statements now properly report the fractional seconds for
   <literal>DATETIME</literal>, <literal>TIME</literal> and
   <literal>TIMESTAMP</literal> columns with decimals specifier (e.g.
   <literal>TIMESTAMP(6)</literal> when using microseconds). Formerly, the
   fractional seconds part was simply omitted from the returned values. Please
   note that this only affects the usage of <link
   linkend="ref.pdo-mysql">PDO_MYSQL</link> with emulated prepares turned off
   (e.g. using the native preparation functionality). Statements using
   connections having <constant>PDO::ATTR_EMULATE_PREPARES</constant>=&true;
   (which is the default) were not affected by the bug fixed and have already
   been getting the proper fractional seconds values from the engine.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.reflection">
  <title>Reflection</title>

  <para>
   <link linkend="book.reflection">Reflection</link> export to string now uses
   <literal>int</literal> and <literal>bool</literal> instead of
   <literal>integer</literal> and <literal>boolean</literal>, respectively.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <para>
   If an <link linkend="book.spl">SPL</link> autoloader throws an exception,
   following autoloaders will not be executed. Previously all autoloaders were
   executed and exceptions were chained.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.simplexml">
  <title>SimpleXML</title>

  <para>
   Mathematic operations involving <link
   linkend="book.simplexml">SimpleXML</link> objects will now treat the text as
   an <type>int</type> or <type>float</type>, whichever is more appropriate.
   Previously values were treated as <type>int</type>s unconditionally.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.cookie-decode">
  <title>Incoming Cookies</title>

  <para>
   As of PHP 7.3.23, the <emphasis>names</emphasis> of incoming cookies are no
   longer url-decoded for security reasons.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
