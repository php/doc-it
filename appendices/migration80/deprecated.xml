<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: fa7cb182a0ef04a3ecef2f9a0d6ae99e77201330 Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="migration80.deprecated">
 <title>Cartteristiche deprecate</title>

 <sect2 xml:id="migration80.deprecated.core">
  <title>PHP Core</title>

  <itemizedlist>
   <listitem>
    <para>
     Se un parametro con un valore di default è 
     seguito da un parametro richiesto, il valore di 
     default non ha effetto. Questo è deprecato da 
     PHP 8.0.0 e può generalmente venir risolto 
     lasciando perdere il valore di default, senza 
     cambiamenti di funzionalità: 
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
function test($a = [], $b) {} // Prima
function test($a, $b) {}      // Dopo
?>
]]>
     </programlisting>
    </para>
    <para>
     Un eccezione a questa regola son i parametri 
     nella forma <code>Type $param = null</code>, 
     dove il valore predefinito null, rende il tipo 
     implicitamente nullable. Questo uso resta 
     permesso ma è raccomandato l'uso di un nullable 
     dichiarato esplicitamente: 
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
function test(A $a = null, $b) {} // Ancora permesso
function test(?A $a, $b) {}       // Raccomandato
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Chiamare <function>get_defined_functions</function>
     con <parameter>exclude_disabled</parameter> 
     espliciamente impostato su &false; è deprecato 
     e non ha più nessun effetto. 
     <function>get_defined_functions</function> non 
     includerà più funzioni disabilitate. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>enchant_broker_set_dict_path</function> e 
     <function>enchant_broker_get_dict_path</function>
     sono deprecate perchè le loro funzionalità non sono 
     disponibilil in libenchant &lt; 1.5 e neppure in 
     libenchant-2.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_dict_add_to_personal</function> 
     è deprecata; usare 
     <function>enchant_dict_add</function> al suo posto. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_dict_is_in_session</function> è deprecata; 
     usare 
     <function>enchant_dict_is_added</function> al suo posto. 
    </para>
   </listitem>
   <listitem>
    <para>
     <function>enchant_broker_free</function> e 
     <function>enchant_broker_free_dict</function> sono 
     deprecate; non impostare l'oggetto. 
    </para>
   </listitem>
   <listitem>
    <para>
     Le costanti <constant>ENCHANT_MYSPELL</constant> 
     e <constant>ENCHANT_ISPELL</constant> sono deprecate. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.libxml">
  <title>LibXML</title>

  <para>
   <function>libxml_disable_entity_loader</function> 
   è stata deprecata. libxml 2.9.0 ora è 
   richiesta. Le entità di loading esterne sono 
   disabilitate di default in ogni caso, e questa 
   funzione non sarà più necessaria per proteggersi 
   contro gli attacchi XXE.
  </para>
 </sect2>

 <sect2 xml:id="migration80.deprecated.pgsql">
  <title>PGSQL / PDO PGSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     La costante <constant>PGSQL_LIBPQ_VERSION_STR</constant> 
     ora ha lo stesso valore di 
     <constant>PGSQL_LIBPQ_VERSION</constant>, e così è 
     stata deprecata. 
    </para>
   </listitem>
   <listitem>
    <para>
     L'aliasing di funzioni nell'estensione pgsql 
     sono stati deprecati. Lça seguente lista elenca 
     le funzioni che possono essere usate al loro posto: 
    </para>
    <para>
     <simplelist>
      <member><function>pg_errormessage</function> → <function>pg_last_error</function></member>
      <member><function>pg_numrows</function> → <function>pg_num_rows</function></member>
      <member><function>pg_numfields</function> → <function>pg_num_fields</function></member>
      <member><function>pg_cmdtuples</function> → <function>pg_affected_rows</function></member>
      <member><function>pg_fieldname</function> → <function>pg_field_name</function></member>
      <member><function>pg_fieldsize</function> → <function>pg_field_size</function></member>
      <member><function>pg_fieldtype</function> → <function>pg_field_type</function></member>
      <member><function>pg_fieldnum</function> → <function>pg_field_num</function></member>
      <member><function>pg_result</function> → <function>pg_fetch_result</function></member>
      <member><function>pg_fieldprtlen</function> → <function>pg_field_prtlen</function></member>
      <member><function>pg_fieldisnull</function> → <function>pg_field_is_null</function></member>
      <member><function>pg_freeresult</function> → <function>pg_free_result</function></member>
      <member><function>pg_getlastoid</function> → <function>pg_last_oid</function></member>
      <member><function>pg_locreate</function> → <function>pg_lo_create</function></member>
      <member><function>pg_lounlink</function> → <function>pg_lo_unlink</function></member>
      <member><function>pg_loopen</function> → <function>pg_lo_open</function></member>
      <member><function>pg_loclose</function> → <function>pg_lo_close</function></member>
      <member><function>pg_loread</function> → <function>pg_lo_read</function></member>
      <member><function>pg_lowrite</function> → <function>pg_lo_write</function></member>
      <member><function>pg_loreadall</function> → <function>pg_lo_read_all</function></member>
      <member><function>pg_loimport</function> → <function>pg_lo_import</function></member>
      <member><function>pg_loexport</function> → <function>pg_lo_export</function></member>
      <member><function>pg_setclientencoding</function> → <function>pg_set_client_encoding</function></member>
      <member><function>pg_clientencoding</function> -> <function>pg_client_encoding</function></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.standard">
  <title>Standard Library</title>

  <itemizedlist>
   <listitem>
    <para>
     Le funzioni di confronto sull'ordinamento 
     che ritornano &true; o &false; ora generano 
     un allarme deprecation warning, e possono essere 
     rimpiazzate con un implementazione che ritorna 
     un integer minore di, uguale a, o maggiore di zero. 
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// Replace
usort($array, fn($a, $b) => $a > $b);
// With
usort($array, fn($a, $b) => $a <=> $b);
?>
]]>
     </programlisting> 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     Usare un file vuoto come ZipArchive è deprecato. 
     Libzip 1.6.0 non accetta più file vuoti come archivi 
     zip validi. Il codice esistente che lavora su questa 
     possibilità verrà rimosso nella prossima versione.
    </para>
   </listitem>
   <listitem>
    <para>
     La procedura API di Zip è deprecata. Usare 
     <classname>ZipArchive</classname> al suo posto. 
     L'iterazione su tutte le entrate può essere 
     completata usando <methodname>ZipArchive::statIndex</methodname> 
     e un <link linkend="control-structures.for">for</link> loop:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// iterazione usando le API procedurali
assert(is_resource($zip));
while ($entry = zip_read($zip)) {
    echo zip_entry_name($entry);
}

// Iterazione usando le object-oriented API
assert($zip instanceof ZipArchive);
for ($i = 0; $entry = $zip->statIndex($i); $i++) {
    echo $entry['name'];
}
?>
]]>
     </programlisting>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.deprecated.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>ReflectionFunction::isDisabled</methodname> 
     è deprecaat, così jnon sarà più possibile creare una 
     <classname>ReflectionFunction</classname> per una 
     funzione disabilitata. questo metodo ritorna sempre 
     &false;.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>ReflectionParameter::getClass</methodname>,
     <methodname>ReflectionParameter::isArray</methodname>, e 
     <methodname>ReflectionParameter::isCallable</methodname> sono deprecate. 
     <methodname>ReflectionParameter::getType</methodname> e 
     <classname>ReflectionType</classname> API possono 
     essere usate al loro posto. 
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
