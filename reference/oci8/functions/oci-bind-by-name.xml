<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 5e41012cfdf8f2eff5fa56de446c7656afac536c Maintainer: pastore Status: ready -->
<!-- CREDITS: cucinato -->
<refentry xml:id="function.oci-bind-by-name" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_bind_by_name</refname>
  <refpurpose>Effettua il binding di una variabile PHP a un segnaposto Oracle</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>oci_bind_by_name</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam><type>string</type><parameter>param</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>max_length</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Associa una variabile PHP <parameter>var</parameter> al segnaposto per
   la variabile di bind Oracle <parameter>param</parameter>. Il binding
   è importante per le prestazioni del database Oracle e anche come metodo per
   evitare problemi di sicurezza legati all'SQL Injection.
  </para>

  <para>
    Il binding consente al database di riutilizzare il contesto della dichiarazione e
    le cache dalle esecuzioni precedenti della dichiarazione, anche se un altro
    utente o processo l'ha inizialmente eseguita. Il binding riduce i rischi
    legati all'SQL Injection, perché i dati associati a una variabile
    di bind non sono mai trattati come parte della dichiarazione SQL. Non
    è necessaria né il quoting né l'escaping.
  </para>

  <para>
    Le variabili PHP sui cui è stato effettuato il binding possono essere modificate e la
    dichiarazione rieseguita senza bisogno di rieffettuare il parsing della dichiarazione o
    di rifare il bind.
  </para>

  <para>
    In Oracle, le variabili di bind sono comunemente suddivise
    in bind <literal>IN</literal> per i valori che vengono passati nel
    database, e bind <literal>OUT</literal> per i valori che vengono
    restituiti a PHP. Una variabile di bind può essere
    sia <literal>IN</literal> che <literal>OUT</literal>. Se una
    variabile di bind verrà utilizzata per l'input o per l'output viene determinato in
    fase di esecuzione.
  </para>

  <para>
    Bisogna specificare <parameter>max_length</parameter> quando si utilizza
    un bind <literal>OUT</literal> affinché PHP possa allocare abbastanza memoria
    per contenere il valore restituito.
  </para>

  <para>
    Per i bind <literal>IN</literal>, è consigliato impostare
    la lunghezza di <parameter>max_length</parameter> se la dichiarazione viene
    rieseguita più volte con valori differenti per la variabile
    PHP. Altrimenti Oracle potrebbe troncare i dati alla lunghezza del
    valore iniziale della variabile PHP. Se non si conosce quale sarà la lunghezza
    massima, richiamare di nuovo <function>oci_bind_by_name</function>
    con la dimensione dei dati correnti prima di
    ogni chiamata a <function>oci_execute</function>. Un binding con una
    lunghezza eccessivamente grande avrà un impatto sulla memoria del processo
    nel database.
  </para>

  <para>
    Una chiamata al bind indica a Oracle da quale indirizzo di memoria leggere i dati.
    Per i bind <literal>IN</literal>, questo indirizzo deve contenere
    dati validi quando viene chiamato <function>oci_execute</function>. Ciò
    significa che la variabile su cui è stato fatto il binding deve rimanere in scope fino
    all'esecuzione. Se non rimane in scope, potrebbero verificarsi risultati imprevisti
    o errori come
    "ORA-01460: unimplemented or unreasonable conversion requested". Per i bind <literal>OUT</literal>, uno dei sintomi è che nessun
    valore viene impostato nella variabile PHP.
  </para>

  <para>
    Per una dichiarazione che viene eseguita ripetutamente, effeettuare il binding di valori che
    non cambiano mai potrebbe ridurre la capacità dell'ottimizzatore Oracle di
    scegliere il piano di esecuzione migliore. Le dichiarazioni di lunga durata
    che vengono rieseguite raramente potrebbero non trarre vantaggio dal binding. Tuttavia,
    in entrambi i casi, il binding potrebbe essere più sicuro rispetto all'unione di stringhe in una
    dichiarazione SQL, poiché questo può rappresentare un rischio per la sicurezza se vengono concatenate
    stringhe dell'utente non filtrate.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Un identificatore valido di una dichiarazione OCI8.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>param</parameter></term>
     <listitem>
      <para>
       Il segnaposto della variabile bind con prefisso due punti utilizzato nella
       dichiarazione. Il due punti è opzionale
       in <parameter>param</parameter>. Oracle non utilizza i punti interrogativi
       per i segnaposti.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variabile PHP da associare a <parameter>param</parameter>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>max_length</parameter></term>
     <listitem>
      <para>
       Imposta la lunghezza massima per i dati. Se la imposti su -1, questa
       funzione utilizzerà la lunghezza attuale
       di <parameter>var</parameter> per impostare la lunghezza
       massima. In questo caso, <parameter>var</parameter> deve
       esistere e contenere dati
       quando viene chiamato <function>oci_bind_by_name</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Il tipo di dato che Oracle tratterà come tale. Il
       tipo <parameter>default</parameter> utilizzato
       è <constant>SQLT_CHR</constant>. Oracle convertirà i dati
       tra questo tipo e la colonna del database (o il tipo di
       variabile PL/SQL), se possibile.
      </para>
      <para>
       Se devi associare un tipo di dato astratto (LOB/ROWID/BFILE), devi
       prima allocarlo utilizzando la funzione
       <function>oci_new_descriptor</function>. La
       <parameter>length</parameter> non viene utilizzata per i tipi di dato astratti
       e dovrebbe essere impostata su -1.
      </para>
      <para>
       I valori possibili per <parameter>type</parameter> sono:
       <itemizedlist>
        <listitem>
         <para>
          <constant>SQLT_BFILEE</constant> o <constant>OCI_B_BFILE</constant>
          <!-- davvero solo E singola --> - per i BFILE;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_CFILEE</constant> o <constant>OCI_B_CFILEE</constant>
          - per i CFILE;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_CLOB</constant> o <constant>OCI_B_CLOB</constant>
          - per i CLOB;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_BLOB</constant> o <constant>OCI_B_BLOB</constant>
          - per i BLOB;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_RDD</constant> o <constant>OCI_B_ROWID</constant>
          - per i ROWID;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_NTY</constant> o <constant>OCI_B_NTY</constant>
          - per tipi di dati nominati;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_INT</constant> o <constant>OCI_B_INT</constant> - per gli interi;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_CHR</constant> - per i VARCHAR;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_BIN</constant> o <constant>OCI_B_BIN</constant>
          - per le colonne RAW;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_LNG</constant> - per le colonne LONG;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_LBI</constant> - per le colonne LONG RAW;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_RSET</constant> - per i cursori creati
          con <function>oci_new_cursor</function>;
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>SQLT_BOL</constant> o <constant>OCI_B_BOL</constant>
          - per i BOOLEAN di PL/SQL (Richiede Oracle Database 12c)
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Inserimento di dati con <function>oci_bind_by_name</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// Crea la tabella con:
//   CREATE TABLE mytab (id NUMBER, text VARCHAR2(40));

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$stid = oci_parse($conn,"INSERT INTO mytab (id, text) VALUES(:id_bv, :text_bv)");

$id = 1;
$text = "Dati da inserire     ";
oci_bind_by_name($stid, ":id_bv", $id);
oci_bind_by_name($stid, ":text_bv", $text);
oci_execute($stid);

// La tabella ora contiene: 1, 'Dati da inserire     '

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Binding una sola volta per più esecuzioni</title>
    <programlisting role="php">
<![CDATA[
<?php

// Crea la tabella con:
//   CREATE TABLE mytab (id NUMBER);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$a = array(1,3,5,7,11);  // dati da inserire

$stid = oci_parse($conn, 'INSERT INTO mytab (id) VALUES (:bv)');
oci_bind_by_name($stid, ':bv', $v, 20);
foreach ($a as $v) {
    $r = oci_execute($stid, OCI_DEFAULT);  // non eseguire il commit automatico
}
oci_commit($conn); // esegue il commit di tutto

// La tabella contiene cinque righe: 1, 3, 5, 7, 11

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Binding con un ciclo <literal>foreach</literal></title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = 'SELECT * FROM departments WHERE department_name = :dname AND location_id = :loc';
$stid = oci_parse($conn, $sql);

$ba = array(':dname' => 'IT Support', ':loc' => 1700);

foreach ($ba as $key => $val) {

    // oci_bind_by_name($stid, $key, $val) non funziona
    // perché associa ogni segnaposto alla stessa posizione: $val
    // invece usa la posizione effettiva dei dati: $ba[$key]
    oci_bind_by_name($stid, $key, $ba[$key]);
}

oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);
foreach ($row as $item) {
    print $item."<br>\n";
}

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Binding in una clausola WHERE</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect("hr", "hrpwd", "localhost/XE");
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = 'SELECT last_name FROM employees WHERE department_id = :didbv ORDER BY last_name';
$stid = oci_parse($conn, $sql);
$didbv = 60;
oci_bind_by_name($stid, ':didbv', $didbv);
oci_execute($stid);
while (($row = oci_fetch_array($stid, OCI_ASSOC)) != false) {
    echo $row['LAST_NAME'] ."<br>\n";
}

// L'output è
//    Austin
//    Ernst
//    Hunold
//    Lorentz
//    Pataballa

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Binding con una clausola LIKE</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

// Trova tutte le città che iniziano con 'South'
$stid = oci_parse($conn, "SELECT city FROM locations WHERE city LIKE :bv");
$city = 'South%';  // '%' è un carattere jolly in SQL
oci_bind_by_name($stid, ":bv", $city);
oci_execute($stid);
oci_fetch_all($stid, $res);

foreach ($res['CITY'] as $c) {
    print $c . "<br>\n";
}
// L'output è
//   South Brunswick
//   South San Francisco
//   Southlake

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Binding con REGEXP_LIKE</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

// Trova tutte le città che contengono 'ing'
$stid = oci_parse($conn, "SELECT city FROM locations WHERE REGEXP_LIKE(city, :bv)");
$city = '.*ing.*';
oci_bind_by_name($stid, ":bv", $city);
oci_execute($stid);
oci_fetch_all($stid, $res);

foreach ($res['CITY'] as $c) {
    print $c . "<br>\n";
}
// L'output è
//   Beijing
//   Singapore

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
    Per un numero limitato e fisso di condizioni nella clausola IN, usare variabili
    di bind individuali. I valori sconosciuti al momento dell'esecuzione possono essere impostati su NULL.
    Questo permette di utilizzare una singola dichiarazione per tutti gli utenti
    dell'applicazione, massimizzando l'efficienza della cache del database Oracle.
  </para>

  <para>
   <example>
    <title>Binding di più valori in una clausola IN</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = 'SELECT last_name FROM employees WHERE employee_id in (:e1, :e2, :e3)';
$stid = oci_parse($conn, $sql);
$mye1 = 103;
$mye2 = 104;
$mye3 = NULL; // supponiamo di non aver ricevuto questo valore
oci_bind_by_name($stid, ':e1', $mye1);
oci_bind_by_name($stid, ':e2', $mye2);
oci_bind_by_name($stid, ':e3', $mye3);
oci_execute($stid);
oci_fetch_all($stid, $res);
foreach ($res['LAST_NAME'] as $name) {
    print $name ."<br>\n";
}

// L'output è:
//   Ernst
//   Hunold

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Binding di un ROWID restituito da una query</title>
    <programlisting role="php">
<![CDATA[
<?php

// Crea la tabella con:
//   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));
//   INSERT INTO mytab (id, salary, name) VALUES (1, 100, 'Chris');
//   COMMIT;

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT ROWID, name FROM mytab WHERE id = :id_bv FOR UPDATE');
$id = 1;
oci_bind_by_name($stid, ':id_bv', $id);
oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);
$rid = $row['ROWID'];
$name = $row['NAME'];

// Cambia il nome in maiuscolo e salva le modifiche
$name = strtoupper($name);
$stid = oci_parse($conn, 'UPDATE mytab SET name = :n_bv WHERE ROWID = :r_bv');
oci_bind_by_name($stid, ':n_bv', $name);
oci_bind_by_name($stid, ':r_bv', $rid, -1, OCI_B_ROWID);
oci_execute($stid);

// La tabella ora contiene 1, 100, CHRIS

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Binding di un ROWID su INSERT</title>
    <programlisting role="php">
<![CDATA[
<?php

// Questo esempio inserisce un id e un nome, e poi aggiorna lo stipendio
// Crea la tabella con:
//   CREATE TABLE mytab (id NUMBER, salary NUMBER, name VARCHAR2(40));
//
// Basato sull'esempio originale di ROWID di thies at thieso dot net (980221)

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $m = oci_error();
    trigger_error(htmlentities($m['message']), E_USER_ERROR);
}

$sql = "INSERT INTO mytab (id, name) VALUES(:id_bv, :name_bv)
        RETURNING ROWID INTO :rid";

$ins_stid = oci_parse($conn, $sql);

$rowid = oci_new_descriptor($conn, OCI_D_ROWID);
oci_bind_by_name($ins_stid, ":id_bv",   $id,    10);
oci_bind_by_name($ins_stid, ":name_bv", $name,  32);
oci_bind_by_name($ins_stid, ":rid",     $rowid, -1, OCI_B_ROWID);

$sql = "UPDATE mytab SET salary = :salary WHERE ROWID = :rid";
$upd_stid = oci_parse($conn, $sql);
oci_bind_by_name($upd_stid, ":rid", $rowid, -1, OCI_B_ROWID);
oci_bind_by_name($upd_stid, ":salary", $salary,   32);

// id e nomi da inserire
$data = array(1111 => "Larry",
              2222 => "Bill",
              3333 => "Jim");

// Stipendio per ogni persona
$salary = 10000;

// Inserisce ed immediatamente aggiorna ogni riga
foreach ($data as $id => $name) {
    oci_execute($ins_stid);
    oci_execute($upd_stid);
}

$rowid->free();
oci_free_statement($upd_stid);
oci_free_statement($ins_stid);

// Mostra le nuove righe
$stid = oci_parse($conn, "SELECT * FROM mytab");
oci_execute($stid);
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
    var_dump($row);
}

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Binding per una stored function PL/SQL</title>
    <programlisting role="php">
<![CDATA[
<?php

//  Prima di eseguire il programma PHP, creare una stored function in
//  SQL*Plus o SQL Developer:
//
//  CREATE OR REPLACE FUNCTION myfunc(p IN NUMBER) RETURN NUMBER AS
//  BEGIN
//      RETURN p * 3;
//  END;

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$p = 8;

$stid = oci_parse($conn, 'begin :r := myfunc(:p); end;');
oci_bind_by_name($stid, ':p', $p);

// Il valore di ritorno è un OUT bind. Il tipo predefinito sarà una stringa
// quindi legare una lunghezza di 40 significa che al massimo verranno restituiti
// 40 caratteri.
oci_bind_by_name($stid, ':r', $r, 40);

oci_execute($stid);

print "$r\n";   // prints 24

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
  <example>
   <title>Binding di parametri per una stored procedure PL/SQL</title>
    <programlisting role="php">
<![CDATA[
<?php

//  Prima di eseguire il programma PHP, creare una stored procedure in
//  SQL*Plus or SQL Developer:
//
//  CREATE OR REPLACE PROCEDURE myproc(p1 IN NUMBER, p2 OUT NUMBER) AS
//  BEGIN
//      p2 := p1 * 2;
//  END;

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$p1 = 8;

$stid = oci_parse($conn, 'begin myproc(:p1, :p2); end;');
oci_bind_by_name($stid, ':p1', $p1);

// Il secondo parametro della procedura è un OUT bind. Il tipo predefinito
// sarà una stringa quindi legare una lunghezza di 40 significa che al massimo verranno
// restituite 40 cifre.
oci_bind_by_name($stid, ':p2', $p2, 40);

oci_execute($stid);

print "$p2\n";   // stampa 16

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
  <example>
   <title>Binding di una colonna CLOB</title>
    <programlisting role="php">
<![CDATA[
<?php

// Prima di eseguire, creare la tabella:
//     CREATE TABLE mytab (mykey NUMBER, myclob CLOB);

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$mykey = 12343;  // chiave arbitraria per questo esempio;

$sql = "INSERT INTO mytab (mykey, myclob)
        VALUES (:mykey, EMPTY_CLOB())
        RETURNING myclob INTO :myclob";

$stid = oci_parse($conn, $sql);
$clob = oci_new_descriptor($conn, OCI_D_LOB);
oci_bind_by_name($stid, ":mykey", $mykey, 5);
oci_bind_by_name($stid, ":myclob", $clob, -1, OCI_B_CLOB);
oci_execute($stid, OCI_DEFAULT);
$clob->save("A very long string");

oci_commit($conn);

// Recupero dei dati CLOB

$query = 'SELECT myclob FROM mytab WHERE mykey = :mykey';

$stid = oci_parse ($conn, $query);
oci_bind_by_name($stid, ":mykey", $mykey, 5);
oci_execute($stid);

print '<table border="1">';
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_LOBS)) {
    print '<tr><td>'.$row['MYCLOB'].'</td></tr>';
    // In un ciclo, liberare la variabile di grandi dimensioni prima del secondo fetch riduce l'utilizzo massimo della memoria da parte di PHP
    unset($row);  
}
print '</table>';

?>
]]>
   </programlisting>
  </example>
  </para>

  <para>
  <example>
   <title>Binding di un BOOLEAN PL/SQL</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message']), E_USER_ERROR);
}

$plsql = 
  "begin
    :output1 := true;
    :output2 := false;
   end;";

$s = oci_parse($c, $plsql);
oci_bind_by_name($s, ':output1', $output1, -1, OCI_B_BOL);
oci_bind_by_name($s, ':output2', $output2, -1, OCI_B_BOL);
oci_execute($s);
var_dump($output1);  // true
var_dump($output2);  // false

?>
]]>
   </programlisting>
  </example>
  </para>

 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Non usare <function>addslashes</function>
    e <function>oci_bind_by_name</function> contemporaneamente, in quanto non
    è necessario nessun quoting. Qualsiasi tipo di quote applicato magicamente verrà scritto 
    nel tuo database, poiché <function>oci_bind_by_name</function>
    inserisce i dati letteralmente e non rimuove le virgolette o i caratteri
    di escape.
   </para>
  </warning>
  <note>
   <para>
    Se associ una stringa a una colonna <literal>CHAR</literal> in
    una clausola <literal>WHERE</literal>, ricorda che Oracle utilizza
    la semantica di confronto con padding vuoto per le colonne
    <literal>CHAR</literal>.  La tua variabile PHP dovrebbe essere riempita con spazi vuoti alla stessa
    larghezza della colonna affinché la clausola <literal>WHERE</literal> abbia
    successo.
   </para>
  </note>
  <note>
   <para>
     L'argomento <parameter>var</parameter> di PHP è un riferimento. Alcune
     forme di loop non funzionano come ci si aspetterebbe:
   </para>
   <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
foreach ($myarray as $key => $value)  {
    oci_bind_by_name($stid, $key, $value);
}
?>
]]>
     </programlisting>
   </informalexample>
   <para>
     Questo associa ogni chiave alla posizione di $value, quindi tutte le variabili
     legate finiscono per puntare al valore dell'ultima iterazione
     del ciclo. Usa invece il seguente codice:
   </para>
   <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
foreach ($myarray as $key => $value) {
    oci_bind_by_name($stid, $key, $myarray[$key]);
}
?>
]]>
     </programlisting>
   </informalexample>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_bind_array_by_name</function></member>
    <member><function>oci_parse</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->