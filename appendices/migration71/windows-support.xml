<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3cd337b4dc91c827399961b9b45524ae4f2b50c9 Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="migration71.windows-support" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Supporto per Windows</title>

 <sect2 xml:id="migration71.windows-support.long-and-utf8-path">
  <title>Supporto per i long e i percorsi UTF-8</title>
  <para>
    Se un'applicazione web èp conforme agli standard UTF-8,
    non sono richieste altre azioni.
    Per le applicazioni che dipendono da percorsi espressi 
    con codifica non conforme a UTF-8 per l'I/O, 
    bisogna impostare una specifica direttiva INI.
    L'impostazione del tipo di codifica INI fa affidamento
    al controllo delle istruzioni depositate nel nucleo
    del linguaggio:
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     internal_encoding
    </simpara>
   </listitem>
    <listitem>
    <simpara>
     default_charset
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     zend.multibyte
    </simpara>
   </listitem>
  </itemizedlist>
  <para>
   Sono state introdotte diverse istruzioni per l'elaborazione delle pagine di codice:
  </para>
      <itemizedlist>
       <listitem>
        <simpara>
         sapi_windows_cp_set() per impostare il codepage predefinito
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         sapi_windows_cp_get() per ottenere il codepage in uso
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         sapi_windows_cp_is_utf8()
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         sapi_windows_cp_conv() per la copnversione fra codepages usando uno stile compatibile con iconv()
        </simpara>
       </listitem>
      </itemizedlist>
  <para>
   Queste funzioni sono thread safe.
  </para>
  <para>
    Il codpage dell'output della console è stato aggiustato per
    codificare l'output in modo dipendente dalla codifica in uso
    da PHP, in funzione del codepage dell'OEM di sistema,
    l'output visualizzato potrebbe essere o no corretto.
    Ad esempio: nel file cmd.exe predefinito su un sistema
    con codepage 437, gli outputs in codepage 1251, 1252, 1253
    e alcuni altri possono essere mostrati correttamente usando
    UTF-8. Sullo stesso sistema i caratteri in codepage 20932
    probabilmente non saranno mostrati correttamente. Questo
    dipende dai ruoliparticolari dei codepages per il sistema,
    la compatibilità con i font (tipi di carattere) e i programmi
    particolari usati per la visualizzazione della console.
    PHP imposta automaticamente il codepage della console
    accordandosi con le regole di codifica scritte su php.ini.
    Usare console alternative piuttosto che cmd.exe potrebbe
    portare occasionalmente a migliori risultati.
  </para>
  <para>
   Tuttavia si deve essere consapevoli che il cambio di
   codepage a runtime, dopo l'avvio del programma potrebbe
   portare a effetti collaterali inaspettati sul CLI. La 
   cosa migliore è modificare le impostazioni su php.ini.
   Quando si usa PHP CLI con un emulatore di console che
   non supporta unicode, potrebbe essere richiesto di 
   acconsentire al cambiamento del codepage della console.
   Il miglior modo per ottenere questo è impostare il
   codificatore predefinito in modo che corrisponda al 
   codepage ANSI. Un altro metodo è quello di impostare 
   le direttive INI output_encoding e input_encoding alla
   codepage richiesta, nel qual caso, comunque, la differenza 
   tra il codpage di sistema e l'I/O codepage facilmente può
   causare mojibake (baco da emoji). In qualche raro caso,
   potrebbe verificarsi un leggero crash di PHP, il console
   codepage originale non può essere ripristinato automaticamente.
   In questo caso, il comando 'chcp' può essere usato per 
   ripristinarlo manualmente.
  </para>
  <para>
   Una particolare cura per i DBCS di sistema - il codepage 
   si attiva a runtime usando <function>ini_set</function> 
   è come forzare la visualizzazione dei problemi.  La differenza 
   con i sistemi non DBCS è che i caratteri estesi richiedono due 
   celle della console per essere visualizzati. In alcuni casi 
   solo la mappatura dei caratteri in glyph set può avere successo,
   attualmente nessun font è cambiato. Questa è la natura dei DBCS 
   di sistema, la via più semplice per prevenire la visualizzazione 
   di problemi è consentire l'uso di <function>ini_set</function> per 
   p cambiamenti di codepage
  </para>
  <para>
   Come risultato del supporto a UTF-8 negli stream, gli script 
   di PHP non sono più limitati alla denominazione dei file secondo 
   le direttive ASCII o ANSI. Ciò è supportato da estensioni come CLI.
   Per altre SAPI la documentazione dei server corrispondenti è 
   facilmente reperibile.
  </para>
  <para>
   Il supporto ai percorsi lunghi è trasparente. Ipercorsi più lunghi
   di 250 bytes vengono automaticamente anteposti con i caratteri 
   <literal>\\?\</literal>. La lunghezza massima dei percorsi è di
   2048 bytes. Attenzione che il limite sulla lunghezza del
   segmento del percorso (basename lenght) è ancora valida.
  </para>
  <para>
   Per aumentare la portabilità del codice  è fortemente 
   raccomandato di assegnare nomi di file, I/O e altri temi
   simili usando set di caratteri UTF-8. In aggiunta, per le
   applicazioni da console, l'uso di font TrueType è preferibile 
   e l'uso di ini_set() per il cambiamento di codepage è
   sconsigliato.
  </para>
  <para>
  </para>
  <para>
  </para>
 </sect2>

 <sect2 xml:id="migration71.windows-support.readline">
  <title>readline</title>

  <para>
   La <link linkend="book.readline">readline extension</link> 
   è supportata attraverso la the 
   <link xlink:href="&url.readline.windows;">WinEditLine library</link>.
   In tal modo la <acronym>CLI</acronym> shell interattiva è supportata
   come (<literal>php.exe -a</literal>).
  </para>
 </sect2>

 <sect2 xml:id="migration71.windows-support.php-fcgi-children">
  <title>PHP_FCGI_CHILDREN</title>
  <para>
   <varname>PHP_FCGI_CHILDREN</varname> ora è rispettata. Se questa 
   variabile d'ambiente è impostata, il primo processo
   <filename>php-cgi.exe</filename> che verrà eseguito eseguirà anche
   il numero di figli specificato. Questi condivideranno lo stesso
   socket TCP.
  </para>
 </sect2>

 <sect2 xml:id="migration71.windows-support.ftok">
  <title>ftok()</title>
  <para>
   Aggiunto il supporto per <function>ftok</function>
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
