<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d58ee8eaaa7f716c51f66f5f1058ab3c42376d98 Maintainer: ManueldG Status: ready -->
<!-- Reviewed: no -->
<!-- CREDITS: pastore, cucinato -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>  
  <refpurpose>Importa le variabili nella symbol table corrente a partire da un array </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>EXTR_OVERWRITE</constant></initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   Importa variabili da un array nella 
   <link linkend="features.gc.refcounting-basics">symbol table</link>.
  </para>
  <para>
   Controlla ogni chiave per vedere se ha un nome di variabile valido.
   Controlla anche le collisioni con le variabili esistenti nella
   tabella dei simboli.
  </para>
  <warning>
   <para>
    Non usare <function>extract</function> su dati non attendibili, come l'input dell'utente
    (per esempio <varname>$_GET</varname>, <varname>$_FILES</varname>).
   </para>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Un array associativo. Questa funzione tratta le chiavi come nomi di variabili e
       i valori come valori di variabili.  Per ogni coppia chiave/valore verrà creata una
       variabile nella tabella dei simboli corrente, soggetta ai
       parametri <parameter>flags</parameter> e <parameter>prefix</parameter>.
      </para>
      <para>
       È necessario utilizzare un array associativo; un array indicizzato di tipo numerico
       non produrrà risultati a meno che non si utilizzi <constant>EXTR_PREFIX_ALL</constant> o
       <constant>EXTR_PREFIX_INVALID</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Il modo in cui vengono trattate le chiavi non valide/numeriche e le collisioni è determinato
       dai <parameter>flag</parameter> di estrazione. Può essere uno dei
       seguenti valori:
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           In caso di collisione, la variabile esistente viene sovrascritta.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           In caso di collisione, non sovrascrive la variabile
           esistente.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>In caso di collisione, antepone al nome della variabile il prefisso
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           Antepone a tutti i nomi delle variabili
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           Aggiunge il prefisso <parameter>prefix</parameter> solo ai nomi di variabili
           non validi/numerici.          
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Sovrascrive la variabile solo se esiste già nella
           tabella dei simboli corrente, altrimenti non fa nulla.  Questo è utile
           per definire un elenco di variabili valide e quindi estrarre
           solo quelle variabili che sono state definite in
           <varname>$_REQUEST</varname>, per esempio.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Crea nomi di variabili con prefisso solo se la versione originale
           della variabile esiste nella tabella dei simboli corrente.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>           
           Estrae le variabili per riferimento. Ciò significa effettivamente che i
           valori delle variabili importate fanno ancora riferimento ai valori 
           dell'<parameter>array</parameter>. Si può usare questo flag
           da solo o combinarlo con qualsiasi altro flag utilizzando l'OR dei
           <parameter>flags</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Se <parameter>flags</parameter> non è specificato, 
       il valore di default è <constant>EXTR_OVERWRITE</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       Notare che <parameter>prefix</parameter> è richiesto solo se sono attivi i
       <parameter>flags</parameter>  <constant>EXTR_PREFIX_SAME</constant>,
       <constant>EXTR_PREFIX_ALL</constant>, <constant>EXTR_PREFIX_INVALID</constant>
       o <constant>EXTR_PREFIX_IF_EXISTS</constant>. Se
       il risultato con prefisso non è un nome di variabile valido, non viene
       importato nella tabella dei simboli. I prefissi vengono automaticamente separati dalla
       chiave dell'array da un carattere underscore.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Restituisce il numero di variabili importate con successo nella tabella dei
   simboli.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Esempio di <function>extract</function></title>
    <para>
     Un possibile utilizzo di <function>extract</function> è importare nella
     tabella dei simboli le variabili contenute in un array associativo restituito da
     <function>wddx_deserialize</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Si supponga che $var_array sia un array restituito da
   wddx_deserialize */

$size = "large";
$var_array = array(
    "color" => "blue",
    "size"  => "medium",
    "shape" => "sphere"
);

extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$color, $size, $shape, $wddx_size\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
blue, large, sphere, medium
]]>
    </screen>
    <para>
     <varname>$size</varname> non è stato sovrascritto perché abbiamo specificato
     <constant>EXTR_PREFIX_SAME</constant>, che ha portato alla
     creazione di <varname>$wddx_size</varname>. Se fosse stato specificato
     <constant>EXTR_SKIP</constant>, allora <varname>$wddx_size</varname> non sarebbe stato creato.
     <constant>EXTR_OVERWRITE</constant> avrebbe fatto sì che <varname>$size</varname> avesse
     il valore "medio" <constant>EXTR_PREFIX_ALL</constant> e avrebbe comportato
     che le nuove variabili verrebbero chiamante <varname>$wddx_color</varname>,
     <varname>$wddx_size</varname> e
     <varname>$wddx_shape</varname>.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Non utilizzare <function>extract</function> su dati non attendibili, come
    l'input dell'utente
    (per esempio <varname>$_GET</varname>, <varname>$_FILES</varname>, ecc.).
    Se o fai, assicurati di usare uno dei <parameter>flags</parameter>
    che non sovrascrivono le variabili come
    <constant>EXTR_SKIP</constant> e fare in modo di estrarre
    nello stesso ordine definito di come è stato definito in 
    <link linkend="ini.variables-order">variables_order</link> all'interno del
    <link linkend="ini">&php.ini;</link>.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
    <member><function>list</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
