<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9fe810352095922a68ce2807745a9bc35c0afe1f Maintainer: pastore Status: ready -->
<!-- Reviewed: no Maintainer: cucinato -->
<!-- CREDITS: cucinato -->
<chapter xml:id="language.types" xmlns="http://docbook.org/ns/docbook">
 <title>Tipi di dati</title>

 <sect1 xml:id="language.types.intro">
  <title>Introduzione</title>
  
  <simpara>
   PHP supporta dieci tipi di dati primitivi.
  </simpara>
  
  <para>
   Quattro tipi scalari:
  </para>

  <itemizedlist>

   <listitem>
    <simpara>
     <type>bool</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>int</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>float</type> (numero in virgola mobile, noto anche come <type>double</type>)
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>string</type>
    </simpara>
   </listitem>

  </itemizedlist>

  <para>
   Quattro tipi composti:
  </para>

  <itemizedlist>

   <listitem>
    <simpara>
     <type>array</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>object</type>
    </simpara>
   </listitem>
   
   <listitem>
    <simpara>
     <type>callable</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>iterable</type>
    </simpara>
   </listitem>

  </itemizedlist>

  <para>
   Ed infine due tipi speciali di dati:
  </para>

  <itemizedlist>

   <listitem>
    <simpara>
     <type>resource</type>
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     <type>NULL</type>
    </simpara>
   </listitem>

  </itemizedlist>

  <simpara>
   Alcuni riferimenti al tipo "double" possono essere rimasti nel manuale. Si consideri
   che double equivale a float; i due nomi esistono solo per ragioni storiche.
  </simpara>
  
  <simpara>
   Generalmente, il tipo di una variabile non viene assegnata
   dal programmatore; anzi, viene assegnata in fase di esecuzione da PHP
   a seconda del contesto nel quale tale variabile viene utilizzata.
  </simpara>

  <note>
   <simpara>
    Per verificare il tipo e il valore di una 
    <link linkend="language.expressions">espressione</link>, usare la funzione
    <function>var_dump</function>.
   </simpara>

   <para>
    Per ottenere una rappresentazione leggibile di un tipo in fase di debugging usare la funzione
    <function>gettype</function>. Per verificare che una variabile sia di un
    certo tipo <emphasis>non</emphasis> usare la funzione <function>gettype</function>, piuttosto sua la funzione
    <literal>is_<replaceable>tipo</replaceable></literal>. Alcuni
    esempi:
   </para>
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a_bool = TRUE;   // un booleano
$a_str  = "foo";  // una stringa
$a_str2 = 'foo';  // una stringa
$an_int = 12;     // un integer

echo gettype($a_bool); // stampa:  boolean
echo gettype($a_str);  // stampa:  string

// Se è un intero, incrementalo di quattro
if (is_int($an_int)) {
    $an_int += 4;
}

// Se $a_bool è una stringa, stampala a video
// (non stampa niente)
if (is_string($a_bool)) {
    echo "Stringa: $a_bool";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>

  <simpara>
   Per forzare la conversione di una variabile in un certo tipo, puoi usare sia il
   <link linkend="language.types.typecasting">cast</link> sulla variabile oppure
   la funzione <function>settype</function>.
  </simpara>

  <simpara>
   Si noti che una variabile può essere riempita con valori differenti in determinate
   situazioni, dipendentemente dal suo tipo nel dato momento. Per ulteriori informazioni
   vedere la sezione sulla <link linkend="language.types.type-juggling">Manipolazione
   dei Tipi</link>. <link linkend="types.comparisons">Le tabelle di comparazione
   dei tipi</link> possono essere utili, in quanto mostrano esempi di
   comparazioni correlate ai tipi.
  </simpara>
 </sect1>
 
 &language.types.boolean;
 &language.types.integer;
 &language.types.float;
 &language.types.string;
 &language.types.numeric-strings;
 &language.types.array;
 &language.types.iterable;
 &language.types.object;
 &language.types.enumerations;
 &language.types.resource;
 &language.types.null;
 &language.types.callable;
 &language.types.declarations;
 &language.types.type-juggling;
 
</chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
