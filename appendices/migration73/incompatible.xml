<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="migration73.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Cambiamenti non compatibili all'indietro</title>

 <sect2 xml:id="migration73.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration73.incompatible.core.heredoc-nowdoc">
   <title>Heredoc/Nowdoc Ending Label Interpretation</title>

   <para>
    Dovuta all'introduzione di 
    <link linkend="migration73.new-features.core.heredoc">
    flexible heredoc/nowdoc syntax</link>, 
    documenti stringa che contengono un'etichetta 
    di fine documento all'interno del loro corpo e 
    potrebbero causare errori sintattici o cambiamenti 
    di interpretazione. Per esempio in:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$str = <<<FOO
abcdefg
   FOO
FOO;
?>
]]>
     </programlisting>
    </informalexample>
    L'occorenza incidentata di <literal>FOO</literal> 
    precedentemente non aveva un significato particolare. 
    Ora essa è interpretata come la fine della stringa 
    heredoc e il successivo <literal>FOO;</literal> 
    causa un errore di sintassi. Questo problema 
    può sempre essere risolto scegliendo un'etichetta 
    di fine documento che non ha occorrenze all'interno 
    del contenuto della stringa.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.continue-targeting-switch">
   <title>Continue Targeting Switch issues Warning</title>

   <para>
    Lo statement (istruzione) <literal>continue</literal> 
    porta con se una deviazione (<literal>switch</literal>)
    controllata delle strutture del flusso del 
    codice, ora genera un allarme del seguente tipo: 
    In PHP l'istruzione 
    <literal>continue</literal> è equivalente a 
    <literal>break</literal>, si comporta come 
    <literal>continue 2</literal> di altri linguaggi.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
while ($foo) {
    switch ($bar) {
      case "baz":
         continue;
         // Warning: "continue" targeting switch is equivalent to
         //          "break". Did you mean to use "continue 2"?
   }
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.arrayaccess">
   <title>Interpretazione stretta delle Integer String Keys su ArrayAccess</title>

   <para>
    Gliaccessi agli array del tipo 
    <literal>$obj["123"]</literal>, dove 
    <literal>$obj</literal> implementa la classe 
    <classname>ArrayAccess</classname> e 
    <literal>"123"</literal> è un integer 
    <type>string</type> letterale, non darà più 
    come risultato una conversione implicita in
    un integer, cioè:
    <literal>$obj->offsetGet("123")</literal> 
    verrà chiamata al posto di 
    <literal>$obj->offsetGet(123)</literal>. 
    Questo corrisponde al comportamento attuale 
    per i non-litterals. Il comportamento degli 
    array non viene condizionato in alcun modo, 
    essi continueranno implicitamente a convertire 
    stringhe di numeri in integers.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.static-properties">
   <title>Proprietà Static non più separate da Reference Assignment</title>

   <para>
    In PHP, le proprietà statiche sono 
    condivise tra classi  nidificate a meno che 
    la proprietà statica non sia esplicitamente 
    sovraccaricata (overriden) in una classe figlia. 
    Comunque, sfruttando un artificio nell'implementazione,
    era possibile separare le proprietà statiche assegnando 
    una referenza. QUesto bug è stato risolto.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class Test {
    public static $x = 0;
}
class Test2 extends Test { }

Test2::$x = &$x;
$x = 1;

var_dump(Test::$x, Test2::$x);
// Previously: int(0), int(1)
// Now:        int(1), int(1)
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.reference-unwrapping">
   <title>References ritornate come Array e Property Accesses immediatamente svelate</title>

   <para>
    Le references sono restituite come array 
    e le proprità di accesso ora sono esposte 
    come parte dell'accesso. Questo significa 
    che non è più possibile modificare le referenze 
    tra l'accesso e l'uso del valore a cui si è 
    avuto accesso:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr = [1];
$ref =& $arr[0];
var_dump($arr[0] + ($arr[0] = 2));
// Previously: int(4), Now: int(3)
?>
]]>
     </programlisting>
    </informalexample>
    Questo rende il comportamento delle 
    references e delle non-references più 
    consistente. Fa piacere notare che leggere 
    e scrivere un valore all'interno di una 
    singola espressione resta un comportamento 
    indefinito e potrebbe venire modificato 
    ulteriormente in futuro. 
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.traversable-unpacking">
   <title>Argomento Unpacking dei Traversables con non-Integer Keys non più supportato</title>

   <para>
    L'argomento unpacking lavora con la classe 
    <classname>Traversable</classname> con chiavi 
    non-integer. Il seguente codice lavorava 
    in PHP 5.6-7.2 in modo accidentato.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(...$args) {
    var_dump($args);
}
function gen() {
    yield 1.23 => 123;
}
foo(...gen());
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.misc">
   <title>Miscellanea</title>

   <para>
    L'utility <filename>ext_skel</filename> è stata 
    completamente ridisegnata con nuove opzioni e alcune 
    vecchie opzioni rimosse. E' stata scritta in PHP e 
    non ha più dipendenze esterne.
   </para>

   <para>
    Il supporto per BeOS è stato tolto.
   </para>

   <para>
    Le eccezioni passano le conversioni automatiche 
    da allarmi in odalità <literal>EH_THROW</literal>
    (es. alcune eccezioni di <classname>DateTime</classname>). 
    Lo stato restituito dalla funzione 
    <function>error_get_last</function> non sarà più 
    popolato. In questo modo esse lavorano allo 
    stesso modo delle eccezioni gestite manualmente. 
   </para>

   <para>
    <classname>TypeError</classname> ora 
    riporta i tipi di errore come 
    <literal>int</literal> e 
    <literal>bool</literal> anziché come
    <literal>integer</literal> e 
    <literal>boolean</literal>, rispoettivamente.
   </para>

   <para>
    Variabili i ndefinite passate alla funzione 
    <function>compact</function> ora saranno riportate 
    come note. 
   </para>

   <para>
    <function>getimagesize</function> e le relative 
    funzioni ora riportano il MIME type delle
    immagini bitmap come <literal>image/bmp</literal> 
    anzicé come <literal>image/x-ms-bmp</literal>, 
    finché il former verrà registrato con lo 
    IANA (vedi <link xlink:href="&url.rfc;7903">RFC 7903</link>). 
   </para>

   <para>
    <function>stream_socket_get_name</function> 
    ora ritorna indirizzi IPV6 racchiusi 
    tra parentesi quadre. Ad esempio 
    <literal>"[::1]:1337"</literal> verrà 
    reso come: <literal>"::1:1337"</literal>. 
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration73.incompatible.bc">
  <title>BCMath Arbitrary Precision Mathematics</title>

  <para>
   Tutti gli allarmi generati dalle 
   <link linkend="ref.bc">funzioni BCMath</link>, 
   ora usano il gestore degli errori di PHP.
   Formalmente alcuni allarmi sono stati scritti 
   direttamente da stderr.
  </para>

  <para>
   <function>bcmul</function> e <function>bcpow</function> 
   ora ritornano numeri con la scala richiesta.
   Formalmente i numeri ritornati potrebbero 
   aver omesso gli zero decimali finali.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.imap">
  <title>IMAP, POP3 e NNTP</title>

  <para>
   I loggin <command>rsh</command>/<command>ssh</command> 
   sono disabilitati poer impostazione predefinita.
   E' possibile usare 
   <link linkend="ini.imap.enable-insecure-rsh">
   imap.enable_insecure_rsh</link> 
   per abilitarli. Si noti che la libreria IMAP 
   non filtra i nomi delle mailbox prima di 
   passarli al comando 
   <command>rsh</command>/<command>ssh</command>, 
   perciò il passaggio di dati non trattati 
   a questa funzione con il comando 
   <command>rsh</command>/<command>ssh</command> 
   abilitato non è una pratica sicura.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mbstring">
  <title>Multibyte String</title>

  <para>
   Si è dovuto aggiungere il supporto per 
   le catture nominate, <literal>mb_ereg_*()</literal>, 
   i modelli che usano catture (captures) nominate 
   si comporteranno diversamente. In particolare 
   le catture nominate saranno parte dei confronti 
   e la funzione <function>mb_ereg_replace</function>
   interpreterà sintassi aggiuntive. Vedi 
   <link linkend="migration73.new-features.mbstring.named-captures">
   Named Captures</link> per ulteriori informazioni.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mysqli">
  <title>Miglioramento delle MySQL Extension</title>

  <para>
   Gli statements predefiniti ora riportano 
   le frazioni di secondo per 
   <literal>DATETIME</literal>, <literal>TIME</literal> 
   e <literal>TIMESTAMP</literal>. Le colonne 
   con lo specificatore dei decimali (es. 
   <literal>TIMESTAMP(6)</literal> quando si usano 
   i microsecondi). Precedentemente la parte frazionaria 
   dei secondi veniva semplicmente omessa. 
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.pdo-mysql">
  <title>MySQL Functions (PDO_MYSQL)</title>

  <para>
   Gli statements predefiniti ora riportano 
   le frazioni di secondo per 
   <literal>DATETIME</literal>, <literal>TIME</literal> 
   e <literal>TIMESTAMP</literal> Le colonne 
   con lo specificatore dei decimali (es. 
   <literal>TIMESTAMP(6)</literal> quando si usano 
   i microsecondi). Precedentemente la parte frazionaria 
   dei secondi veniva semplicmente omessa. 
   Fa piacere notare che questo interessa 
   solo l'uso di 
   <link linkend="ref.pdo-mysql">PDO_MYSQL</link> 
   con funzioni preconfezionate spente 
   (cioè usando la funzionalità nativa 
   del linguaggio). Le istruzioni che usano 
   connessioni con 
   <constant>PDO::ATTR_EMULATE_PREPARES</constant>=&true;
   (che è l'impostazione di default) non sono interessate 
   dal bug riparato ehanno già la propria parte 
   frazionaria dei secondi passata dal motore di PHP.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.reflection">
  <title>Reflection</title>

  <para>
   <link linkend="book.reflection">Reflection</link> 
   l'esportazione verso una stringa ora usa 
   <literal>int</literal> e <literal>bool</literal> 
   anziché <literal>integer</literal> e 
   <literal>boolean</literal>, rispettivamente.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <para>
   Se un caricamento di 
   <link linkend="book.spl">SPL</link> 
   genera un eccezione, i successivi caricamenti non 
   verranno eseguiti. Precedentemente tutti i 
   caricamenti automatici venivano eseguiti e 
   le eccezioni venivano incatenate una con l'altra.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.simplexml">
  <title>SimpleXML</title>

  <para>
   Le operazioni matematiche che coinvolgono oggetti 
   <link linkend="book.simplexml">SimpleXML</link> 
   ora tratteranno il testo come 
   <type>int</type> o <type>float</type>, 
   conformemente al modo più appropriato.
   Precedentemente questi valori erano trattati 
   incondizionatamente come <type>int</type>. 
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.cookie-decode">
  <title>Cookies in entrata</title>

  <para>
   Come per PHP 7.3.23, i <emphasis>nomi</emphasis> 
   dei cookie in entrata non saranno più 
   decodificati come URL per ragioni di sicurezza.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
