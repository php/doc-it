<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: b8e1b1357def73f310c9f7405035b3acc0cb1eaf Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->
<chapter xml:id="faq.using" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Usare PHP</title>
  <titleabbrev>Usare PHP</titleabbrev>

  <para>
   Questa sezione raccoglie molti errori comuni 
   che possono incontrarsi durante la scrittura 
   di codice PHP. 
  </para>

  <qandaset>

   <qandaentry xml:id="faq.using.parameterorder">
    <!-- TODO: Mention named arguments -->
    <question>
     <para>
      Non rieso a ricordare l'ordine dei parametri delle 
      funzioni di PHP, è casuale? 
     </para>
    </question>
    <answer>
     <para>
      PHP è un contenitore, tra le altre cose, che tiene insieme 
      centinaia di librerie esterne, perciò, qualche volta, capita 
      di dimenticare qualcosa. Comunque delle semplici regole di 
      comportamento sono le seguenti: 
     </para>
     <para>
      <link linkend="book.array">Array function</link> i parametri sono 
      ordinati come "<emphasis>aghi in un pagliaio</emphasis>" deve le 
      <link linkend="book.strings">funzioni per le stringhe</link> 
      sono la "<emphasis>paglia</emphasis>". 
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.anyform">
    <question>
     <para>
      Vorrei scrivere uno script generico in PHP che possa gestire 
      dati che arrivano sotto ogni forma. Come posso saper quali 
      metodi e variabili POST ho a disposizione? 
     </para>
    </question>
    <answer>
     <para>
      PHP offre molte <
      link linkend="language.variables.predefined">variabili predefinite</link>, 
      come la superglobale <varname>$_POST</varname>.  Si può eseguire 
      un ciclo attraverso <varname>$_POST</varname> per ispezionare 
      l'array associato di tutti i suoi valori. Ad esempio, eseguiamo un 
      semplice ciclo con &foreach;, per cercare tutti i suoi valori 
      <function>vuoti</function> e stamparli sul monitor di sistema. 
      <programlisting role="php">
<![CDATA[
<?php
$empty = $post = array();
foreach ($_POST as $varname => $varvalue) {
    if (empty($varvalue)) {
        $empty[$varname] = $varvalue;
    } else {
        $post[$varname] = $varvalue;
    }
}

print "<pre>";
if (empty($empty)) {
    print "None of the POSTed values are empty, posted:\n";
    var_dump($post);
} else {
    print "We have " . count($empty) . " empty values\n";
    print "Posted:\n"; var_dump($post);
    print "Empty:\n";  var_dump($empty);
    exit;
}
?>
]]>
      </programlisting>
     </para>

    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.addslashes">
    <!-- TODO Probably should mention not doing this... -->
    <question>
     <para>
      Ho bisogno di convertire tutti i simboli di apice (') 
      in simboli di barra retroversa seguita da un simbolo di 
      apice (\'). Come posso farlo con l'uso di un espressione 
      regolare (regex)? vorrei anche convertire l'espressione 
      " to \" in "\ to \\.
     </para>
    </question>
    <answer>
     <para>
      Supponiamo che questo sia per un database, è possibile usare 
      il meccanismo di comparazione fornito con la libreria del 
      database. Per esempio usando 
      <function>mysql_real_escape_string</function> con MySQL e 
      <function>pg_escape_string</function> con PostgreSQL. Oppure 
      le più generiche <function>addslashes</function> e 
      <function>stripslashes</function> che sono più comuni nelle 
      vecchie versioni di PHP. 
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.wrong-order">
    <question>
     <para>
      Quando eseguo il codice seguente, l'output viene emesso 
      in un ordine errato: 
     <programlisting role="php">
<![CDATA[
<?php
function myfunc($argument)
{
    echo $argument + 10;
}
$variable = 10;
echo "myfunc($variable) = " . myfunc($variable);
?>
]]>
    </programlisting>
     cosa è successo? 
     </para>
    </question>
    <answer>
     <para>
      Per essere in grado di utilizzare i risultati di una funzione 
      personalizzata in un espressione (concatenandoli in una stringa 
      ordinata come nell'esempio precedente), è necessario usare la 
      funzione <function>return</function> per ottenere il valore di 
      ritorno e non <function>echo</function>. 
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.newlines">
    <question>
     <para>
      Cosa è successo alle mie nuove linee? 
      <programlisting role="php">
<![CDATA[
<pre>
<?php echo "Questa sarebbe la prima linea."; ?> 
<?php echo "Questa linea verrebbe mostrata dopo la precedente."; ?> 
</pre>
]]>
      </programlisting>
     </para>
    </question>
    <answer>
     <para>
      In PHP la fine di un blocco di codice è definita si da 
      "?&gt;" che da "?&gt;\n" (dove \n sta per newline). Così, 
      nell'esempio precedente le stringhe verranno visualizzate 
      in successione su un'unica linea, perché PHP omette l'inserimento 
      automatico di un simbolo di new line alla fine della stringa. 
      Ciò significa che sarà necessario inserire un carattere di 
      new line (\n) alla fine di ogni blocco di codice per far si 
      che ogni riga venga stampata al suo posto, su una riga diversa. 
     </para>
     <para>
      Perché PHP fa questo? Perché quando si formatta un testo 
      HTML normalizzato questo comportamento rende la nostra vita 
      più facile perché quel simbolo di nuova linea (new line) 
      non è desiderato, per non creare righe di testo estremamente 
      lunghe o comunque rendere la pagina sorgente del documento 
      HTML estremamente difficile da leggere per evitare questo 
      effetto. 
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.headers-sent">
    <question>
     <para>
      Ho ricevuto un messaggio come il seguente: 'Warning: Cannot send 
      session cookie - headers already sent...'; oppure: 'Cannot add 
      header information - headers already sent...'. 
     </para>
    </question>
    <answer>
     <para>
      Le funzioni <function>header</function>, 
      <function>setcookie</function>,
      e le <link linkend="ref.session">session functions</link> 
      hanno bisogno di aggiungere gli headers (intestazioni) 
      al loro output stream ma gli headers possono essere inviati 
      solo prima di qualsiasi altro contenuto. Prima dell'uso di 
      queste funzioni non può esserci nessun output, inteso come 
      codice HTML. La funzione <function>headers_sent</function> 
      controllerà se il nostro script ha già provveduto all'invio 
      degli headers e di vedere anche le 
      <link linkend="ref.outcontrol">Output Control functions</link>. 
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.header">
    <question>
     <para>
      Ho bisogno di accedere alle informazioni contenute 
      nell'header di richiesta in modo diretto. Come posso 
      farlo? 
     </para>
    </question>
    <answer>
     <para>
      La funzione <function>getallheaders</function> fa proprio 
      questo se stiamo eseguendo PHP in un modulo Apache. Il 
      seguente tratto di codice visualizzerà tutti gli header di 
      richiesta: 
      <programlisting role="php">
<![CDATA[
<?php
$headers = getallheaders();
foreach ($headers as $name => $content) {
    echo "headers[$name] = $content<br />\n";
}
?>
]]>
      </programlisting>
     </para>
     <para>
      Si veda anche: 
      <function>apache_lookup_uri</function>,
      <function>apache_response_headers</function>, e 
      <function>fsockopen</function>
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.authentication">
    <question>
     <para>
      Quando cerco di utilizzare l'autenticazione con 
      IIS ricevo un messaggio: 'No Input file specified'.
     </para>
    </question>
    <answer>
     <para>
      Il modello per la sicurezza di IIS è la causa di ciò. 
      E' un problema comune di tutti i programmi CGI che 
      vengono eseguiti sotto IIS. Un buon lavoro consiste nel 
      creare un file HTML non verificato da PHP come pagina di 
      entrata nella directory autenticata. Quindi usare un TAG 
      META per reindirizzare il codice alla pagina PHP, oppure 
      creare un link alla pagina PHP. Poi PHP riconoscerà 
      correttamente l'autenticazione. Questo non succede con 
      altri web servers. Per ulteriori informazioni, vedere: 
      <link xlink:href="&url.iis;">&url.iis;</link> e la sezione 
      del manuale a 
      <link linkend="features.http-auth">Autenticazione HTTP</link>.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.iis.sharing">
    <question>
     <para>
      Wndows: non riesco ad accedere ai file condivisi 
      con un altro computer usando IIS. 
     </para>
    </question>
    <answer>
     <para>
      E' necessario modificare le 
      <literal>Go to Internet Information Services</literal>. 
      Localizzare il proprio file PHP e andare alle sue 
      proprietà. Visualizzare <literal>File Security</literal> 
      selezionare <literal>Edit -&lt; 
      Anonymous access and authentication control</literal>. 
     </para>
     <para>
      Si può correggere il problema deselezionando 
      <literal>Anonymous Access</literal> e lasciando 
      <literal>Integrated Window Authentication</literal> spuntato 
      o, selzionando <literal>Anonymous Access</literal> 
      e modificando l'utente anonimo come se non avesse i 
      diritti di accesso. 
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.mixml">
    <question>
     <para>
      Come posso supporre di mescolare XML e PHP? Si 
      lamenta dei miei TAG XML &lt;!
     </para>
    </question>
    <answer>
     <para>
      Per includere i TAG &lt; di xml nel codice di PHP è necessario 
      disattivare gli short tags impostando la direttiva PHP 
      <link linkend="ini.short-open-tag">short_open_tags</link> a 
      <literal>0</literal>. Non è possibile impostare questa direttiva 
      con la funzione <function>ini_set</function>. Riguardo ai 
      <link linkend="ini.short-open-tag">short_open_tags</link> e la 
      loro impostazione su 'on' oppure 'off' è possibile fare qualcosa 
      di simile a: <literal>&lt;?php echo '&lt;?xml'; ?&gt;</literal>.  
      Il valore predefinito per questa direttiva è: <literal>On</literal>. 
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.variables">
    <question>
     <para>
      Dove posso trovare una lista completa delle variabili 
      disponibili in PHP? 
     </para>
    </question>
    <answer>
     <para>
      Leggendo la pagina del manuale riguardante le 
      <link linkend="language.variables.predefined">variabili predefinite</link> 
      che include una lista parziale delle variabili predefinite 
      messe a disposizione da PHP. Una lista completa di tutte le 
      variabili (e molte altre informazioni) può essere consultata 
      chiamando la funzione 
      <function>phpinfo</function>. Sicuramente sarà utile leggere 
      la sezione del manuale su 
      <link linkend="language.variables.external">variabili dall'esterno 
      di PHP</link> che descrive i più comuni scenari di uso di variabili 
      esterne, come quelle che derivano dai form HTML, dai cookies o 
      dagli URL. 
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.freepdf">
    <question>
     <para>
      Come posso generare file PDF senza usare le librerie 
      proprietarie e a pagamento come PDFLib? Mi piacerebbe 
      usare del software libero che non richieda librerie 
      esterne. 
     </para>
    </question>
    <answer>
     <para>
      Ci sono alcune alternative scritte in PHP come 
      <link xlink:href="&url.pdf.fpdf;">FPDF</link> e 
      <link xlink:href="&url.pdf.tcpdf;">TCPDF</link>.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.using.shorthandbytes">
    <question>
     <para>
      Alcune direttive PHP possono ricevere anche valori byte, 
      anziché solo <type>int</type>. Quali sono tutte le opzioni 
      shorthand byte? 
     </para>
    </question>
    <answer>
     <para>
      Le opzioni disponibili sono: K (per Kilobytes), M (per Megabytes) e 
      G (per Gigabytes; disponibile da PHP 5.1.0), e sono tutte 
      case-insensitive. Qualcos'altro assume bytes come valori: 
      <literal>1M</literal> equivale a 1 Megabyte o 
      <literal>1048576</literal> bytes. <literal>1K</literal> equivale a 
      1 Kilobyte o <literal>1024</literal> bytes. Queste annotazioni 
      abbreviate possono essere usate in &php.ini; e nella funzione 
      <function>ini_set</function>. Attenzione che il valore numerico 
      viene promosso a <type>int</type>; per istanza predefinita, 
      <literal>0.5M</literal> è interpretato come <literal>0</literal>. 
     </para>
     <note>
      <title>kilobyte versus kibibyte</title>
      <para>
       La notazione PHP descrive un kilobyte come equivalente a 
       1024 bytes, mentre lo standard <acronym>IEC</acronym> 
       considera questo valore come un kibibyte. Summary: 
       k and K = 1024 bytes. 
      </para>
     </note>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
