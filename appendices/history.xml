<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 763506217efcf05c758932771e33fad3fa64b506 Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->

<appendix xml:id="history" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Storia di PHP e dei progetti correlati</title>
 <para>
  PHP has come a long way since its birth in the mid-1990's.
  From humble beginnings to becoming one of the most prominent
  languages powering the web, the evolution of PHP is a geek's
  fairy tale.  Mind you, such explosive growth was no easy
  task. Those of you interested in briefly seeing how PHP grew
  to become what it is today, read on.  If you'd like to touch
  a piece of Internet history, you can find old releases of
  PHP in the <link xlink:href="&url.php.museum;">PHP Museum</link>.
 </para>
 
 <sect1 xml:id="history.php">
  <title>History of PHP</title>
  
  <sect2 xml:id="history.phpfi">
   <title>PHP Tools, FI, Construction Kit, and PHP/FI</title>
   <para>
    PHP as it's known today is actually the successor to a
    product named PHP/FI. Created in 1994 by Rasmus Lerdorf,
    the very first incarnation of PHP was a simple set of
    Common Gateway Interface (CGI) binaries written in the C
    programming language. Originally used for tracking visits
    to his online resume, he named the suite of scripts "Personal
    Home Page Tools," more frequently referenced as "PHP Tools."
    Over time, more functionality was desired, and Rasmus rewrote
    PHP Tools, producing a much larger and richer implementation.
    This new model was capable of database interaction and more,
    providing a framework upon which users could develop simple dynamic
    web applications such as guestbooks. In June of 1995, Rasmus
    <link xlink:href="&url.php.release1.0.0;">released</link>
    the source code for PHP Tools to the public, which allowed
    developers to use it as they saw fit. This also permitted -
    and encouraged - users to provide fixes for bugs in the code,
    and to generally improve upon it.
   </para>
   <para>
    Nel settembre dello stesso anno, Rasmus si concentrò su PHP e - in
    un breve periodo - si risolse per il nome di PHP. Ora riferito agli
    strumenti come FI (Forms Interpreter), la nuova implementazione
    incluse alcune funzionalità di base di PHP così come le conosciamo
    oggi. Aggiunse variabili Perl-like, l'interpretazione automatica
    delle variabili dei form, e incluse la sintassi HTML nel linguaggio.
    La sintassi per se stessa era simile a quella di Perl, anche se
    molto più limitata, semplice e per certi versi inconsistente
    Infatti per incapsulare il codice in un file HTML
    i programmatori devono usare i commenti di HTML. Anche se questo
    metodo all'inizio non fu ben accetto, FI continuò ad aumentare allegramente
    i suoi consensi come un CGI tool --- ma non ancora come un linguaggio.
    Comunque, questo iniziò a cambiare il mese successivo, nell' ottobre del 1995,
    Rasmus rilasciò una riscrittura completa del codice. Riportando il nome a 
    PHP, fu così nominato (brevemente) "Personal Home Page Construction
    Kit," e fu la prima release a potersi vantare di tale nome, a quel tempo,
    considerata un'interfaccia di scripting avanzata. Il linguaggio era
    deliberatamente disegnato per assomigliare a C nella sua struttura,
    rendendolo così di facile addozione per gli sviluppatori che avevano
    familiarità con il C, Perl e linguaggi simili.
    Evitando così alcune lontane limitazioni con i sistemi di compilazione
    UNIX and POSIX, il potenziale per le implementazioni di Windows NT
    era già stato esplorato.
   </para>
   <para>
    Il codice subì un'altra completa riscrittura nell'aprile del 1996,
    combinando i nomi delle passate releases, Rasmus introdusse PHP/FI.
    Questa implementazione di seconda generazione iniziava veramente ad evolvere PHP
    da raccolta di strumenti in un linguaggio di programmazione vero e proprio.
    Incluse il supporto nativo per i database DBM, mySQL e Postgres95,
    i cookies, supporto per le funzioni definite dall'utente, e molto altro.
    A giugno, PHP/FI aveva una sua versione 2.0. un fatto interessante
    a proposito di questo, comunque, è che ci fu solo una singola versione
    di PHP 2.0. Quando finalmente passò dallo stato di versione beta
    nel novembre del 1997, il motore di parsing che girava a basso livello
    era già stato interamente riscritto.
   </para>
   <para>
    Anche se visse una carriera di sviluppo molto breve, continua a riscontrare
    una crescente popolarità nel sempre giovane mondo della programmazione web.
    Nel 1997 e 1998, PHP/FI fu un culto per molte migliaia di utenti in
    tutto il mondo. Un sondaggio di Netcraft del maggio 1998 indicò che
    quasi 60.000 domini ispezionati avevano nel loro header la parola
    "PHP", indicando che il loro host server aveva installato tale protocollo.
    Questo numero rappresentava aprossimativamente l'1% di tutti i domini di
    Internet in quel periodo. Nonostante questi numeri impressionanti la maturazione
    di PHP/FI era condannata da delle limitazioni: mentre c'erano molti aiutanti
    minori, era ancora essenzialmente sviluppato da un solo individuo.
   </para>
   <para>
    <example>
     <title>Esempio di codice PHP/FI</title>
     <programlisting role="html">
<![CDATA[
<!--include /text/header.html-->

<!--getenv HTTP_USER_AGENT-->
<!--ifsubstr $exec_result Mozilla-->
  Hey, you are using Netscape!<p>
<!--endif-->

<!--sql database select * from table where user='$username'-->
<!--ifless $numentries 1-->
  Sorry, that record does not exist<p>
<!--endif exit-->
  Welcome <!--$user-->!<p>
  You have <!--$index:0--> credits left in your account.<p>

<!--include /text/footer.html-->
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="history.php3">
   <title>PHP 3</title>
   <para>
    PHP 3.0 fu la prima versione che riassemblò PHP così
    come esiste oggi. Trovando PHP/FI 2.0 ancora inefficiente
    e carente di metodi necessari ad implementare un'applicazione di e-commerce,
    furono sviluppate da un progetto universitario. Andi Gutmans e
    Zeev Suraski di Tel Aviv, Israel, iniziarono di nuovo, un'altra completa
    riscrittura dell' underlyng parser nel 1997. Avvicinarono Rasmus
    online, discussero vari aspetti della corrente
    implementazione e della loro riprogrammazione di PHP. 
    Concentrandosi sull'ottimizzazione dell' engine e iniziando a costruire
    sulle basi esistenti di PHP/FI. Andi, Rasmus, and Zeev decisero di collaborare
    nello sviluppo di un nuovo, indipendente linguaggio di programmazione.
    Questo completo nuovo linguaggio rimuoveva le implicazioni di
    un uso personale e limitato che il nome PHP/FI 2.0 si portava appresso.
    Fu rinominato semplicemente 'PHP', con l'intento iniziale che
    fosse un acronimo ricorsivo, PHP: Hypertext Preprocessor.
   </para>
   <para>
    Uno dei punti di forza di PHP 3.0 era l'enorme estensibilità
    delle sue features. Oltre a ciò provvide gli utenti finali
    di un'interfaccia matura per molti protocolli di database,
    e APIs, la facilità con cui era possibile estendere il liguaggio
    attirò decine di sviluppatori che sottoscrissero molti moduli.
    Discutere, questa era la chiave del tremendo successo di PHP 3.0.
    Altre features essenziali introdotte in PHP 3.0 includevano
    il supporto per la programmazione orientata agli oggetti (OOP)
    emolte altre consistenti modifiche alla sintasi del linguaggio.
   </para>
   <para>
    Nel giugno del 1998, con molti altri sviluppatori di tutto il mondo
    che si unirono al progetto PHP 3.0 fu annunciato dalla nuova squadra
    di sviluppatori di PHP come il successore ufficiale di PHP/FI 2.0.
    Lo sviluppo attivo di PHP/FI 2.0 che cessò di fatto nel novembre
    dell'anno precedente, era ufficiosamente terminato.
    Dopo appena nove mesi di test aperti al pubblico, quando arrivò
    l'annuncio ufficiale del rilascio di PHP 3.0, era già installato su
    oltre 70.000 domini al mondo, e non fu pi limitato a lungo dai
    compilatori dei sistemi operativi POSIX. Una relativamente piccola
    quantità di domini riportavano che PHP era installato su servers
    che giravano sotto Windows 95, 98, NT, e Macintosh. Al suo punto più
    alto, PHP 3.0 era installato approssimativamente sul 10% dei web servers
    di Internet.
   </para>
  </sect2>

  <sect2 xml:id="history.php4">
   <title>PHP 4</title>
   <para>
    Nell'inverno del 1998, poco dopo il rilascio ufficiale di
    PHP 3.0, Andi Gutmans e Zeev Suraski iniziarono a lavorare
    sulla riscrittura del cuore di PHP. L'obiettivo del progetto 
    era di testare le prestazioni di applicazioni complesse 
    e testare la modularità del codice di base di PHP.
    Quali applicazioni era possibile fare con PHP 3.0 le 
    sue nuove features e il supporto per una moltitudine
    di database e API di terze parti. Ma PHP 3.0 non
    era pensato per maneggiare applicazioni complesse in
    maniera efficente.
   </para>
   <para>
    Il nuovo motore, soprannominato 'Zend Engine' (compressione dei loro
    nomi, Zeev e Andi), raggiunse questi obiettivi con successo,
    e fu introdotto alla metà del 1999. PHP 4.0,
    si basava su questo motore, assieme a una vasta scelta
    di nuove features, fu ufficialmente rilasciato nel maggio del
    2000, quasi due anni dopo il suo predecessore.  In aggiunta
    alle notevoli performance testate, PHP 4.0
    includeva altre features chiave come il supporto per molti altri
    web servers, sessioni HTTP, output buffering, metodi più sicuri
    per maneggiare l'input degli utenti e molti nuovi costrutti
    del linguaggio.
   </para>
  </sect2>

  <sect2 xml:id="history.php5">
   <title>PHP 5</title>
   <para>
    PHP 5 fu rilasciato nel luglio del 2004 dopo un lungo
    lavoro di sviluppo e numerose pre-versioni. E' più che altro
    ispirato al suo core, lo <literal>Zend Engine 2.0</literal> con
    un nuvo object model e molte altre nuove features.
   </para>
   <para>
    La squadra di sviluppatori di PHP include decine di persone,
    così come decine di altre persone lavorano su progetti correlati a PHP
    come PEAR, PECL, e sulla documentazione, e una struttura di network
    sottostante basata su oltre un centinaio di web servers individuali
    su sei dei sette continenti del pianeta. Anche se è solo una stima
    basata su statistiche dello scorso anno è ragionevole pensare che
    PHP sia ora installato su decine e forse centinaia di milioni di
    domini in tutto il mondo.
   </para>
  </sect2>
 </sect1>
 
 <sect1 xml:id="history.php.related">
  <title>History of PHP related projects</title>
  
  <!-- Hope Stig and/or Egon can do this
  
  <sect2 xml:id="history.phpdoc">
   <title>PHP Documentation Project</title>
   <para>
   </para>
  </sect2>
  
  -->

  <sect2 xml:id="history.pear">
   <title>PEAR</title>
   <para>
    <link xlink:href="&url.php.pear;">PEAR</link>, the <literal>PHP Extension and
    Application Repository</literal> (originally, PHP Extension and Add-on
    Repository) is PHP's version of foundation classes, and may grow in
    the future to be one of the key ways to distribute PHP extensions among
    developers.
   </para>
   <para>
    PEAR was born in discussions held in the PHP Developers'
    Meeting (PDM) held in January 2000 in Tel Aviv. It was
    created by Stig S. Bakken, and is dedicated to his first-born
    daughter, Malin Bakken.
   </para>
   <para>
    Since early 2000, PEAR has grown to be a big, significant
    project with a large number of developers working on
    implementing common, reusable functionality for the
    benefit of the entire PHP community. PEAR today includes
    a wide variety of infrastructure foundation classes
    for database access, content caching, mathematical
    calculations, eCommerce and much more.
   </para>
   <para>
    More information about PEAR can be found in <link
    xlink:href="&url.php.pear.manual;">the manual</link>.
   </para>
  </sect2>

  <sect2 xml:id="history.phpqa">
   <title>PHP Quality Assurance Initiative</title>
   <para>
    The <link xlink:href="&url.php.prerelease;">PHP Quality Assurance
    Initiative</link> was set up in the summer of 2000 in response to
    criticism that PHP releases were not being tested well enough for
    production environments. The team now consists of a core group of
    developers with a good understanding of the PHP code
    base. These developers spend a lot of their time
    localizing and fixing bugs within PHP. In addition
    there are many other team members who test and
    provide feedback on these fixes using a wide variety
    of platforms.
   </para>
  </sect2>

  <sect2 xml:id="history.phpgtk">
   <title>PHP-GTK</title>
   <para>
    <link xlink:href="&url.php.gtk;">PHP-GTK</link> is the PHP solution for
    writing client side GUI applications. Andrei Zmievski remembers the
    planing and creation process of PHP-GTK:
   </para>
   <blockquote>
    <para>
     GUI programming has always been of my interests, and I found
     that Gtk+ is a very nice toolkit, except that programming with
     it in C is somewhat tedious. After witnessing PyGtk and GTK-Perl
     implementations, I decided to see if PHP could be made to
     interface with Gtk+, even minimally. Starting in August of 2000,
     I began to have a bit more free time so that is when I started
     experimenting. My main guideline was the PyGtk implementation
     as it was fairly feature complete and had a nice object-oriented
     interface. James Henstridge, the author of PyGtk, provided very
     helpful advice during those initial stages.
    </para>
    <para>
     Hand-writing the interfaces to all the Gtk+ functions was out of
     the question, so I seized upon the idea of code-generator, similar
     to how PyGtk did it. The code generator is a PHP program that reads
     a set of <filename>.defs</filename> file containing the Gtk+ classes, constants, and
     methods information and generates C code that interfaces PHP with
     them. What cannot be generated automatically can be written by
     hand in <filename>.overrides</filename> file.
    </para>
    <para>
     Working on the code generator and the infrastructure took some
     time, because I could spend little time on PHP-GTK during the
     fall of 2000. After I showed PHP-GTK to Frank Kromann, he got
     interested and started helping me out with code generator work
     and Win32 implementation. When we wrote the first Hello World
     program and fired it up, it was extremely exciting. It took a
     couple more months to get the project to a presentable condition
     and the initial version was released on March 1, 2001. The
     story promptly hit SlashDot.
    </para>
    <para>
     Sensing that PHP-GTK might be extensive, I set up separate
     mailing lists and CVS repositories for it, as well as the
     gtk.php.net website with the help of Colin Viebrock. The
     documentation would also need to be done and James Moore
     came in to help with that.
    </para>
    <para>
     Since its release PHP-GTK has been gaining popularity. We
     have our own documentation team, the manual keeps improving,
     people start writing extensions for PHP-GTK, and more and
     more exciting applications with it.
    </para>
   </blockquote>
  </sect2>
 </sect1>

 <sect1 xml:id="history.php.books">
  <title>Books about PHP</title>
  <para>
   As PHP grew, it began to be recognized as a world-wide popular
   development platform. One of the most interesting ways of
   seeing this trend was by observing the books about PHP that
   came out throughout the years.
  </para>
  <para>
   To the best of our knowledge, the first book dedicated to PHP was
   'PHP - tvorba interaktivních internetových aplikací' (<emphasis>PHP
   - Creating Interactive Internet Applications</emphasis>) - a Czech
   book published in April 1999, authored by Jirka Kosek. Next month
   followed a German book authored by Egon Schmid, Christian Cartus
   and Richard Blume. The first book in English about PHP was
   published shortly afterwards, and was 'Core PHP Programming' by
   Leon Atkinson. These books covered PHP 3.0.
  </para>
  <para>
   While these books were the first of their kind - they were
   followed by a large number of books from a host of authors and
   publishers. There are over 400 books in English, over 100 books in
   German, and over 50 books in French or Spanish! In addition, you
   can find books about PHP in many other languages, including
   Korean, Japanese and Hebrew.
  </para>
  <para>
   Clearly, this large number of books, written by different
   authors, published by many publishers, and their availability
   in so many languages - are a strong testimony for PHP's
   world-wide success.
  </para>
 </sect1>
 
 <sect1 xml:id="history.php.publications">
  <title>Publications about PHP</title>
  <para>
   To the best of our knowledge, the first article about PHP in
   a hard-copy magazine was published in the Czech mutation of
   Computerworld in the spring of 1998, and covered PHP 3.0. As with
   books, this was the first in a series of many articles published
   about PHP in various prominent magazines.
  </para>
  <para>
   Articles about PHP appeared in Dr. Dobbs, Linux Enterprise,
   Linux Magazine and many more. Articles about migrating ASP-based
   applications to PHP under Windows even appear on <productname>Microsoft</productname>'s
   very own <acronym>MSDN</acronym>!
  </para>
 </sect1>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
