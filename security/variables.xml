<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f0ed705e1ac34fed4c92979f63bee74c382f991b Maintainer: ManueldG Status: ready -->
<!-- Reviewed: no -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->


<chapter xml:id="security.variables" xmlns="http://docbook.org/ns/docbook">
 <title>Dati inviati dall'utente</title>
  <para>
   La più grande debolezza di molti programmi scritti in <acronym>PHP</acronym>
   non è insita nel linguaggio, ma semplicemente un problema di codice scritto 
   non tenendo a mente la sicurezza. Per questo motivo, dovresti sempre prenderti 
   il ​​tempo di considerare le implicazioni di una certa parte di codice, per 
   accertare il possibile malfunzionamento se gli viene inviata una variabile
   inaspettata.
  <example>
  <title>Utilizzo pericoloso delle variabili</title> 
   <programlisting role="php">
<![CDATA[
<?php
// rimuovere un file dalla propria home directory... o forse
// di qualcun altro?
unlink ($evil_var);

//Scrivere il log d'accesso... o magari una voce di /etc/passwd?
fwrite ($fp, $evil_var);

//Eseguire qualcosa di innocuo o rm -rf *?
system ($evil_var);
exec ($evil_var);

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Bisognerebbe esaminare attentamente il codice per assicurarci
  che tutte le variabili inviate da un browser web siano state correttamente
  controllate e porsi le seguenti domande:  
  <itemizedlist>
   <listitem>
    <simpara>
     Questo script avrà effetto solo sui file previsti?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Può un dato indesiderato o inusuale interferire con il funzionamento? 
    </simpara>
   </listitem>
   <listitem>
   <simpara>
     Questo script può essere utilizzato in modi non previsti?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Può essere usato insieme ad altri script in modo dannoso?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Le transazioni verranno adeguatamente tracciate?
    </simpara>
   </listitem>
  </itemizedlist>
 </para>
 <para>  
  Ponendosi queste domande durante la scrittura dello script,
  piuttosto che farsele dopo, si previene una difficile riscrittura quando
  invece si ha bisogno di migliorarne la sicurezza. Iniziando a usare queste
  regole, non si garantisce la sicurezza del sistema, ma si può contribuire a
  migliorarlo. 
 </para>
 <para>
  Migliorare la sicurezza disabilitando le impostazioni utili per nascondere
  l'origine dei dati, la validità o l'integrità dell'input. La creazione di variabili implicite e
  l'input incontrollato può portare a vulnerabilità come attacchi di injection e
  manipolazione dei dati.
 </para>
 <para>
  Funzionalità come <literal>register_globals</literal> e
  <literal>magic_quotes</literal> (entrambi rimossi in PHP 5.4.0) hanno contribuito
  ad agevolare questi rischi creando automaticamente variabili dall'input dell'utente e
  escape dai dati in modo incoerente. Sebbene queste funzioni non siano più in PHP, persistono rischi simili
  se la gestione dell'input è gestita in modo errato.
 </para>
 <para>
  Abilitare <link linkend="function.error-reporting">error_reporting(E_ALL)</link>
  aiuta a rilevare le variabili non inizializzate e a convalidare l'input. Utilizzare la modalità strict
  (<link linkend="language.types.declarations.strict">declare(strict_types=1)</link>,
  introdotto in PHP 7) per garantire la sicurezza dei tipi, prevenire conversioni involontarie,
  e migliorare la sicurezza generale.
 </para> 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
