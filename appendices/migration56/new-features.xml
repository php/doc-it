<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c9b1de1c1266145d5472d0c05edea2c1bf970ff0 Maintainer: lucalzetta Status: ready -->
<!-- $Revision$ -->

<sect1 xml:id="migration56.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuove caratteristiche</title>
 <sect2 xml:id="migration56.new-features.const-scalar-exprs">
  <title>Costanti espressioni</title>

  <para>
   E' ora possibile creare espressioni scalari con numeri
   stringhe e literals e/o constanti contesti in cui PHP 
   precedentemente si aspettava un valore statico così
   come per le costanti e le dichiarazioni di proprietà 
   e gli argomenti di default delle funzioni.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;
const TWO = ONE * 2;

class C {
    const THREE = TWO + 1;
    const ONE_THIRD = ONE / self::THREE;
    const SENTENCE = 'The value of THREE is '.self::THREE;

    public function f($a = ONE + self::THREE) {
        return $a;
    }
}

echo (new C)->f()."\n";
echo C::SENTENCE;
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
4
The value of THREE is 3
]]>
   </screen>
  </informalexample>

  <para>
   E' anche possibile definire una costante
   di tipo <type>array</type> usando la parola chiave
   <literal>const</literal>:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
const ARR = ['a', 'b'];

echo ARR[0];
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
a
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.variadics">
  <title>Funzioni Variadic con <literal>...</literal></title>

  <para>
   <link linkend="functions.variable-arg-list">Lrìe funzioni Variadic 
   </link> ora possono essere implementate usando l'operatore tre punti
   <literal>...</literal>, anzichè affidandosi alla funzione
   <function>func_get_args</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f($req, $opt = null, ...$params) {
    // $params is an array containing the remaining arguments.
    printf('$req: %d; $opt: %d; number of params: %d'."\n",
           $req, $opt, count($params));
}

f(1);
f(1, 2);
f(1, 2, 3);
f(1, 2, 3, 4);
f(1, 2, 3, 4, 5);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
$req: 1; $opt: 0; number of params: 0
$req: 1; $opt: 2; number of params: 0
$req: 1; $opt: 2; number of params: 1
$req: 1; $opt: 2; number of params: 2
$req: 1; $opt: 2; number of params: 3
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.splat">
  <title>Apertura di un argomento con <literal>...</literal></title>

  <para>
   Oggetti 
   <link linkend="language.types.array">Arrays</link> e
   <interfacename>Traversable</interfacename> possono essere aperti
   nella lista degli argomenti quando chiamiamo funzioni usando l'operatore
   <literal>...</literal>. Conosciuto anche in altri linguaggi come
   splat operator, incluso Ruby.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function add($a, $b, $c) {
    return $a + $b + $c;
}

$operators = [2, 3];
echo add(1, ...$operators);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
6
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.exponentiation">
  <title>Elevamento a potenza con <literal>**</literal></title>

  <para>
   L'operatore <literal>**</literal>, associativo a sinistra è stato
   aggiunto per supportare l'elevamento a potenza con una scorciatoia.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
printf("2 ** 3 ==      %d\n", 2 ** 3);
printf("2 ** 3 ** 2 == %d\n", 2 ** 3 ** 2);

$a = 2;
$a **= 3;
printf("a ==           %d\n", $a);
?>
]]>
   </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
2 ** 3 ==      8
2 ** 3 ** 2 == 512
a ==           8
]]>
  </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.use">
  <title><literal>use function</literal> e <literal>use const</literal></title>

  <para>
   L'operatore
   <link linkend="language.namespaces.importing"><literal>use</literal></link> 
   ha esteso il suo comportamento per supportare funzioni di importazione
   e costanti in aggiunta alle classi. Questo è stato ottenuto con
   i costrutti <literal>use function</literal> e <literal>use const</literal>
   rispettivamente.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
namespace Name\Space {
    const FOO = 42;
    function f() { echo __FUNCTION__."\n"; }
}

namespace {
    use const Name\Space\FOO;
    use function Name\Space\f;

    echo FOO."\n";
    f();
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
42
Name\Space\f
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.phpdbg">
  <title>phpdbg</title>

  <para>
   PHP ora include un debugger interattivo chiamato phpdbg 
   implementato come un modulo SAPI. Per ulteriori informazioni
   è possibile visitare la 
   <link linkend="book.phpdbg">documentazione phpdbg</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.default-encoding">
  <title>Codifica dei character di default</title>

  <para>
   <link linkend="ini.default-charset">default_charset</link> ora
   viene usato come il character set di default per le funzioni
   <function>htmlentities</function>, <function>html_entity_decode</function> 
   e <function>htmlspecialchars</function>. Attenzione che se i
   deprecati iconv e mbstring encoding settings sono attivati, 
   prendono il sopravvento su default_charset per le funzioni
   iconv e mbstring rispettivamente.
  </para>

  <para>
   Il vaalore di default per queste impostazioni è <literal>UTF-8</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.reusable-input">
  <title><link linkend="wrappers.php.input"><literal>php://input</literal></link> 
  è riutilizzabile</title>

  <para>
   <link linkend="wrappers.php.input"><literal>php://input</literal></link>
   ora può essere riaperto e rilegge tutte le volte che è richiesto.
   Questo lavoro ha ottenuto risultati anche in una maggior riduzione
   della memoria richiesta per trattare richieste di dati POST.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.large-file">
  <title>Upload di file di grosse dimensioni</title>

  <para>
   I file più grandi di 2 gigabytes ora sono accettati.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.gmp">
  <title><link linkend="book.gmp">GMP</link> supporta l'overloading degli operatori</title>

  <para>
   <link linkend="book.gmp">Gli oggetti GMP</link> ora supportano 
   l'overload e il casting verso i tipi scalari. 
   Questo permette di realizzare un codice più espressivo
   usando GMP:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$a = gmp_init(42);
$b = gmp_init(17);

if (version_compare(PHP_VERSION, '5.6', '<')) {
    echo gmp_intval(gmp_add($a, $b)), PHP_EOL;
    echo gmp_intval(gmp_add($a, 17)), PHP_EOL;
    echo gmp_intval(gmp_add(42, $b)), PHP_EOL;
} else {
    echo $a + $b, PHP_EOL;
    echo $a + 17, PHP_EOL;
    echo 42 + $b, PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
59
59
59
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.hash-equals">
  <title><function>hash_equals</function> per una comparazione delle stringhe 
  esente da timing attack</title>

  <para>
   La funzione <function>hash_equals</function> 
   è stata aggiunta per comparare due stringhe 
   in un tempo costante. Questo può essere usato 
   per difendersi da attacchi timing attacks; 
   quabdo testiamo la funzione <function>crypt</function>
   password hashes (assumendo di essere abilitati ad usare
   <function>password_hash</function> e
   <function>password_verify</function>, che non sono 
   suscettibili ai timing attacks).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$expected  = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$correct   = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$incorrect = crypt('1234',  '$2a$07$usesomesillystringforsalt$');

var_dump(hash_equals($expected, $correct));
var_dump(hash_equals($expected, $incorrect));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.debuginfo">
  <title><literal>__debugInfo()</literal></title>

  <para>
   Il metodo magico <link linkend="language.oop5.magic.debuginfo">__debugInfo()</link>
   è stato aggiunto per permettere agli oggetti di
   cambiare le proprietà e i valori che vengono mostrati 
   qundo l'oggetto viene mostrato usando la funzione
   <function>var_dump</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.gost">
  <title>Algoritmo gost-crypto hash</title>

  <para>
   L'algoritmo di hash <literal>gost-crypto</literal> è
   stato aggiunto. Questo permette di implementare la funzione
   hash GOST usando le tabelle CryptoPro S-box come specificato
   dalla <link xlink:href="&url.rfc;4357">RFC 4357, section 11.2</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.openssl">
  <title>Miglioramenti di SSL/TLS</title>

  <para>
   Un ampio numero di miglioramenti sono stati fatti
   per il supporto di SSL/TLS in PHP 5.6. Questi includono
   <link linkend="migration56.incompatible.peer-verification">
    abilitazione della verifica peer di default</link>,
   supporto alla verifica dei certificati fingerprint, 
   mitigando gli attacchi di rinegozizione TLS
   e molte nuove <link linkend="context.ssl">opzioni SSL di contesto</link>
   per permettere un controllo più granulare sui protocolli e la verifica
   delle impostazioni quando si usano stream cifrati.
  </para>

  <para>
   Questi cambiamenti sono descritti in maggior dettaglio
   su <link linkend="migration56.openssl">Cambiamenti di OpenSSL in PHP 5.6.x</link>
   che è una sezione di questa guida di migrazione.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.postgresql">
  <title><link linkend="book.pgsql">pgsql</link> async support</title>

  <para>
   L'estensione <link linkend="book.pgsql">pgsql</link> 
   ora supporta le connessioni asincrone e le query, in tal
   modo si abilita un comportamento non bloccante quando
   interagiamo con un database PostgreSQL. Le connessioni
   asincrone possono essere stabilite attraverso la costante
   <constant>PGSQL_CONNECT_ASYNC</constant>, e le nuove funzioni
   <function>pg_connect_poll</function>, <function>pg_socket</function>,
   <function>pg_consume_input</function> e <function>pg_flush</function>
   che possono essere usate per maneggiare connessioni asincrone
   e queries.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
